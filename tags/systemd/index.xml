<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>systemd on λ ryan. himmelwright. net</title>
    <link>http://ryan.himmelwright.net/tags/systemd/</link>
    <description>Recent content in systemd on λ ryan. himmelwright. net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jul 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://ryan.himmelwright.net/tags/systemd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating Systemd Unit Files using Ansible</title>
      <link>http://ryan.himmelwright.net/post/foundryvtt-service-ansible-role/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/foundryvtt-service-ansible-role/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;../../post/autostarting-application-systemd-service/&#34;&gt;previous post&lt;/a&gt;, I
created a systemd unit file to define an application as a service, and
configured it to auto-start on my server. I&amp;rsquo;ve been making a big push to define
the provisioning of all my homelab machines/VMs using automation. So the last
step in setting up my FoundryVTT server, is to &lt;em&gt;automate&lt;/em&gt; the process.
Fortunately, creating a systemd unit file is quite easy to do using
&lt;a href=&#34;https://www.ansible.com&#34;&gt;ansible&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-ansible-role&#34;&gt;Creating the Ansible Role&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start by creating a role (if you don&amp;rsquo;t know what an ansible role
is, checkout &lt;a href=&#34;../../post/ansible-quickstart/&#34;&gt;this guide&lt;/a&gt; I wrote not too long ago).
First, create some directories:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd roles
mkdir -p foundryvtt/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;defaults,tasks,templates&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One difference from roles I&amp;rsquo;ve created previously, is that this one contains a
&lt;code&gt;templates&lt;/code&gt; directory. That is because &lt;em&gt;this&lt;/em&gt; role will use a &lt;code&gt;j2&lt;/code&gt; template to
define the systemd unit file, but more on that later.&lt;/p&gt;

&lt;h2 id=&#34;defining-variables&#34;&gt;Defining Variables&lt;/h2&gt;

&lt;p&gt;Lets create some files, starting with one to define the default variables.
Open &lt;code&gt;roles/foundryvtt/defaults/main.yaml&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
&lt;span style=&#34;color:#f92672&#34;&gt;user&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ ansible_user_id }}&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;service_description&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A service to run the Foundry VTT node app&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;foundryvtt_dir&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/{{ user }}/foundryvtt/&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;foundrydata_dir&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/{{ user }}/foundrydata&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This defines a few default veriables that will be used in the service file
template, as well as in the tasks file. The variables can optionally be
over-ridden when running a playbook, but they will default to these values if
not specified.&lt;/p&gt;

&lt;h2 id=&#34;making-a-template&#34;&gt;Making a Template&lt;/h2&gt;

&lt;p&gt;Now that the varibles are defined, we can create the unit file template. So,
open a new file (&lt;code&gt;roles/foundryvtt/templates/foundryvtt.service.j2&lt;/code&gt; in my
case), and insert the unit file from the previous post.&lt;/p&gt;

&lt;p&gt;Next, walk through the file and substitute any values for the variables defined
in the previous section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-INI&#34; data-lang=&#34;INI&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[Unit]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ service_description }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Documentation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;https://foundryvtt.com&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;After&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;network.target&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[Service]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Environment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;NODE_PORT=30000&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;simple&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ user }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/node {{ foundry_dir }}/resources/app/main.js --dataPath={{ foundrydata_dir }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Restart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;on-failure&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[Install]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;multi-user.target&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great! This template is now ready to be used in our role.&lt;/p&gt;

&lt;h2 id=&#34;ansible-tasks&#34;&gt;Ansible Tasks&lt;/h2&gt;

&lt;p&gt;Last but not least, time to write some Ansible tasks. Open a new file
(&lt;code&gt;roles/foundryvtt/tasks/main.yaml&lt;/code&gt;), and lets start by adding any additional
tasks &lt;em&gt;this particular role&lt;/em&gt; needs, outside of the service file. For my example,
this includes creating the defined data directories, unzipping the application source
package, and opening required ports in the firewall:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Note, you likely don&amp;#39;t need these tasks. They are just for my particular&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## example...&lt;/span&gt;
- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Create foundryvtt dir at {{ foundryvtt_dir }}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;become_user&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ user }}&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ foundryvtt_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;directory&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Create foundrydata dir at {{ foundrydata_dir }}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;become_user&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ user }}&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ foundrydata_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;directory&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Send Foundry Package&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;when&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foundryvtt_send_src is defined and foundryvtt_send_src is not none&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;copy&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;src&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ foundryvtt_send_src }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;dest&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ foundryvtt_package_src }}&amp;#34;&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Extract package&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;unarchive&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;src&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ foundryvtt_package_src }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;dest&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ foundryvtt_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;remote_src&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;yes&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Start firewalld&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;systemd&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;firewalld&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;started&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Open FoundryVTT Ports (firewalld)&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;firewalld&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30000&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;/tcp&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;permanent&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;yes&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;enabled&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;reload service firewalld, in all cases&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;systemd&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;firewalld&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;reloaded&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With all that defined, lets finally define a task to create our unit file using
the template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Create foundryvtt systemd service file&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;src&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;templates/foundryvtt.service.j2&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;dest&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/lib/systemd/system/foundryvtt.service&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;src&lt;/code&gt; is set to the relative location (to the role) of the template we
defined earlier, and the &lt;code&gt;dest&lt;/code&gt; is set to where we would like the generated
file to be copied to. This template is a unit file for a systemd service, so
I&amp;rsquo;m going to copy it to &lt;code&gt;/lib/systemd/system/foundryvtt.service&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Last but not least, lets start the newly created service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Start foundryvtt service&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;systemd&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foundryvtt&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;started&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;hellip; and&amp;hellip; our role is finished!&lt;/p&gt;

&lt;h2 id=&#34;playbook&#34;&gt;Playbook&lt;/h2&gt;

&lt;p&gt;To run the role, it is easiest to have it run in a playbook. I try to define
the provisioning of all my systems in their own playbooks, including my foundry
server, so I use this role there. Just remember to call it in a &lt;code&gt;roles:&lt;/code&gt;
section of the playbook, like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;roles&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;foundryvtt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it. We&amp;rsquo;ve easily automated setting up the systemd unit file from the
previous post using ansible. This makes defining and reproducing unit roles
very simple. In addition, knowing how to use templates in ansible is &lt;em&gt;very&lt;/em&gt;
powerful, and I will definitely be utilizing them much more moving forward.
Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Auto-starting Applications with Systemd Services</title>
      <link>http://ryan.himmelwright.net/post/autostarting-application-systemd-service/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/autostarting-application-systemd-service/</guid>
      <description>&lt;p&gt;Recently, I&amp;rsquo;ve been hosting a &lt;a href=&#34;http://foundryvtt.com&#34;&gt;Foundry VTT&lt;/a&gt; server (a
nodejs app) in a virtual machine on my home network. I would start the
application inside a
&lt;a href=&#34;http://ryan.himmelwright.net/post/setting-up-tmuxinator/&#34;&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/a&gt; session, by
executing a CLI command which worked&amp;hellip; fine.  However, if the VM restarted or
the applications crashed, I had to ssh in and manually run the command again. So,
to better automate this tedious task, I created a unit file to
define the foundry server as a systemd service. Here&amp;rsquo;s how.&lt;/p&gt;

&lt;h3 id=&#34;unit-files&#34;&gt;Unit Files&lt;/h3&gt;

&lt;p&gt;With so many distributions utilizing
&lt;a href=&#34;https://en.wikipedia.org/wiki/Systemd&#34;&gt;systemd&lt;/a&gt;, unit files have become a new
standard for auto-starting, or re-starting, applications in Linux. Simply put,
unit files are used to define resources to be managed by systemd. This includes
&lt;em&gt;services&lt;/em&gt;. So to run FoundryVTT &lt;em&gt;as&lt;/em&gt; a service, we need to create a new systemd
&lt;code&gt;.service&lt;/code&gt; unit file.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-service-file&#34;&gt;Creating the service file&lt;/h3&gt;

&lt;p&gt;To create a unit file, I opened &lt;code&gt;/lib/systemd/system/foundryvtt.service&lt;/code&gt; in
&lt;code&gt;vim&lt;/code&gt; and filled it with the following contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[Unit]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A service to run the Foundry VTT node app&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Documentation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;https://foundryvtt.com&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;After&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;network.target&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[Service]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Environment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;NODE_PORT=30000&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;simple&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ryan&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/node /home/user/foundryvtt/resources/app/main.js --dataPath=/home/user/foundrydata&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Restart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;on-failure&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[Install]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;multi-user.target&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This file tells systemd all the information it needs to run the service. The
contents of the &lt;code&gt;[Unit]&lt;/code&gt; section define some basic information about the unit
file. The variables which define our &lt;em&gt;service&lt;/em&gt;, are appropriately listed in the
&lt;code&gt;[Service]&lt;/code&gt; section and include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Environment=NODE_PORT=30000&lt;/code&gt; sets an environment variable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Type=simple&lt;/code&gt; states that our service is executing a single command, and is
&amp;ldquo;started&amp;rdquo; when that command runs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;User=ryan&lt;/code&gt; tells the service to run under the &lt;code&gt;ryan&lt;/code&gt; user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecStart&lt;/code&gt; defines which command to run when the service is started
(this is the command I had to manually type in &lt;code&gt;tmux&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Restart=on-failure&lt;/code&gt; tells the service to automatically restart on any
failures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save and exit the file.&lt;/p&gt;

&lt;h3 id=&#34;start-and-enable-the-service&#34;&gt;Start and Enable the Service&lt;/h3&gt;

&lt;p&gt;With the unit file created, the new service can be started:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo systemctl start foundryvtt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition to starting the service, I also &lt;em&gt;enabled&lt;/em&gt; it so that it will
automatically launch whenever the system reboots:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo systemctl enable foundryvtt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;stopping-restarting-and-status&#34;&gt;Stopping, Restarting, and Status&lt;/h3&gt;

&lt;p&gt;To check that the service is running, use the command &lt;code&gt;systemctl status foundryvtt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo systemctl status foundryvtt
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ryan@magmar dotfiles&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo systemctl status foundryvtt
● foundryvtt.service - A service to run the Foundry VTT node app
     Loaded: loaded &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;/usr/lib/systemd/system/foundryvtt.service; disabled; vendor preset: disabled&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
     Active: active &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;running&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; since Sun 2020-07-12 16:34:29 EDT; 2s ago
       Docs: https://foundryvtt.com
   Main PID: &lt;span style=&#34;color:#ae81ff&#34;&gt;1070&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;node&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
      Tasks: &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;limit: 2327&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
     Memory: 93.8M
        CPU: 1.227s
     CGroup: /system.slice/foundryvtt.service
             └─1070 /usr/bin/node /home/ryan/foundryvtt/resources/app/main.js --dataPath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/ryan/foundrydata

... *A Bunch of Logs I removed*...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output contains &lt;code&gt;Active: active (running)&lt;/code&gt;, which means the service is
running. We can also restart or stop the service using the &lt;code&gt;systemctl restart
foundryvtt&lt;/code&gt; and &lt;code&gt;systemctl stop foundryvtt&lt;/code&gt; commands, respectively.&lt;/p&gt;

&lt;p&gt;For example, I can stop the service and then check the status to verify it is
killed (&lt;em&gt;Note the &lt;code&gt;Active: inactive (dead)&lt;/code&gt; in the status output&lt;/em&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ryan@magmar&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo systemctl stop foundryvtt
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ryan@magmar&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo systemctl status foundryvtt
● foundryvtt.service - A service to run the Foundry VTT node app
     Loaded: loaded &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;/usr/lib/systemd/system/foundryvtt.service; disabled; vendor preset: disabled&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
     Active: inactive &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dead&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       Docs: https://foundryvtt.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s about it. Systemd unit files might seem complicated at first, but
after writing, one they aren&amp;rsquo;t that bad. Additionally, it turns out that using
automation to &lt;em&gt;create&lt;/em&gt; them isn&amp;rsquo;t too difficult either&amp;hellip; but I&amp;rsquo;ll show that in
another post. Until then, enjoy!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
