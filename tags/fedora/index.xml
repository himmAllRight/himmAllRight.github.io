<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fedora on λ ryan. himmelwright. net</title>
    <link>http://ryan.himmelwright.net/tags/fedora/</link>
    <description>Recent content in Fedora on λ ryan. himmelwright. net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 31 Oct 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://ryan.himmelwright.net/tags/fedora/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automated Nativefier App builds</title>
      <link>http://ryan.himmelwright.net/post/automated-nativefier-app-builds/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/automated-nativefier-app-builds/</guid>
      <description>&lt;p&gt;Most applications we use today are fancy web pages, wrapped up in a desktop
shell. Many people even forgo desktop builds, instead opting to run webapps
simply as another tab in their web browser (Ex: Slack,
Discord, Notion). Personally, I prefer to have dedicated windows opened for my
essential tools. As a result, I love using
&lt;a href=&#34;https://github.com/jiahaog/nativefier&#34;&gt;nativefier&lt;/a&gt; to create desktop versions
of my favorite web-based applicatons. The only problem is&amp;hellip; it can be a pain to
setup. Lets fix that.&lt;/p&gt;

&lt;h2 id=&#34;how-i-use-nativefier&#34;&gt;How I use nativefier&lt;/h2&gt;

&lt;h3 id=&#34;what-apps-i-use-it-for&#34;&gt;What Apps I use it for&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/automated-nativefier-app-builds/pocketcasts.png&#34;&gt;&lt;img alt=&#34;Using Pocketcasts as a nativefier build&#34; src=&#34;../../img/posts/automated-nativefier-app-builds/pocketcasts.png&#34; style=&#34;max-width:
100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Using the Pocketcasts web app in a desktop window via
nativefier&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;I use nativefier for all of the web services that are missing a Linux client,
or web tools that I use often and want a dedicated desktop client for. On most days,
I use the following tools via a nativefier desktop build:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pocket&lt;/strong&gt; - to read articles&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pocketcasts&lt;/strong&gt; - to listend to synced podcasts between my phone and computer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fastmail&lt;/strong&gt; - For my personal email and calendar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;homeassistant&lt;/strong&gt; - To control parts of my house (mostly lights and temp)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notion&lt;/strong&gt; - My &lt;a href=&#34;../../post/trying-notion/&#34;&gt;notes and planning tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Soundcloud&lt;/strong&gt; - For music while working&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, while not used every day, I have made nativefier builds for &lt;strong&gt;twitch&lt;/strong&gt; and
&lt;strong&gt;icloud&lt;/strong&gt;.  These are both apps that exist on other desktops but don&amp;rsquo;t have an
official Linux build.&lt;/p&gt;

&lt;h3 id=&#34;how-i-make-them-feel-like-normal-apps&#34;&gt;How I make them &lt;em&gt;feel&lt;/em&gt; like normal apps&lt;/h3&gt;

&lt;p&gt;There are a few steps I take to help make these builds &lt;em&gt;feel&lt;/em&gt; more like native
ones.&lt;/p&gt;

&lt;h4 id=&#34;desktop-files&#34;&gt;Desktop Files&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/automated-nativefier-app-builds/nativefier_krunner.png&#34;&gt;&lt;img alt=&#34;The builds show up as normal applications&#34; src=&#34;../../img/posts/automated-nativefier-app-builds/nativefier_krunner.png&#34; style=&#34;max-width:
100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The Pocket and Pocketcasts builds showing as normal
applications in search&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The first, and argualy most important step I take, is creating a &lt;a href=&#34;https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html&#34;&gt;desktop
entity&lt;/a&gt;
for each nativefier build. A desktop entity defines an application
in Gnome and KDE Plasma desktop environments, allowing it to show up in menus and
launchers. Defining an entity for the nativefier builds tells the system to to
treat the build as a normal application, which is what we want.&lt;/p&gt;

&lt;h4 id=&#34;icons&#34;&gt;Icons&lt;/h4&gt;

&lt;p&gt;The second action I&amp;rsquo;ve started doing is making sure that I use proper icons
when I &lt;em&gt;run&lt;/em&gt; nativefier. I already needed the icon for creating the desktop
entity, but I noticed the icon displayed in the running app often didn&amp;rsquo;t match
the one defined in the desktop file. This extra step resolves this issue and
helps make everything look more cohesive.&lt;/p&gt;

&lt;h3 id=&#34;how-i-usually-create-nativefier-builds&#34;&gt;How I &lt;em&gt;usually&lt;/em&gt; create nativefier builds&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/automated-nativefier-app-builds/desktop-app-edit.png&#34;&gt;&lt;img alt=&#34;Coping to a new computer often requires editing all the application files&#34; src=&#34;../../img/posts/automated-nativefier-app-builds/desktop-app-edit.png&#34; style=&#34;max-width:
100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Coping to a new computer often requires editing all the application files&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;While these additional steps help nativefier builds behave like real desktop applications,
it adds a bunch extra work to the creation process. When I want to make a new
nativefier app, I usually have to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install nativefier and it&amp;rsquo;s dependencies (usually in a podman container)&lt;/li&gt;
&lt;li&gt;Build the application to a build directory&lt;/li&gt;
&lt;li&gt;Find an icon for the application and add it to my &lt;code&gt;~/.local/share/icons/&lt;/code&gt;
folder&lt;/li&gt;
&lt;li&gt;Create a new &lt;code&gt;.desktop&lt;/code&gt; file for the application, which involves:

&lt;ul&gt;
&lt;li&gt;Filling out the description&lt;/li&gt;
&lt;li&gt;Changing the exec paths.&lt;/li&gt;
&lt;li&gt;Adding the icon path&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Verify it works (something is usually missing)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To save some time when setting up a new system, I often copy the build
directories along with the desktop and icon files. However, even that can be
quite tedious. For example, if the new system uses a different username (&lt;code&gt;ryan&lt;/code&gt; vs.
&lt;code&gt;rhimmew&lt;/code&gt;), I have to update all of the desktop files to reflect the change.&lt;/p&gt;

&lt;p&gt;We can do better. Lets automate it.&lt;/p&gt;

&lt;h2 id=&#34;using-a-podman-container-instead&#34;&gt;Using a podman container instead&lt;/h2&gt;

&lt;p&gt;Before diving into the automating the steps, there is one improvement
to my normal process I want to make. Instead of installing nativefier from a
&lt;code&gt;npm&lt;/code&gt; install, I want to switch to using an ephemeral nativefier
container for the builds. This has several benefits, including not having to install
dependencies, and always using the latest version for the automation. Plus&amp;hellip;
containers are fun.&lt;/p&gt;

&lt;p&gt;After tweaking the suggested &lt;a href=&#34;https://github.com/jiahaog/nativefier#usage-with-docker&#34;&gt;docker
instructions&lt;/a&gt;, I was
able to get a nativefier container building apps on my desktop using podman:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pull the Image&lt;/span&gt;
podman pull jiahaog/nativefier

&lt;span style=&#34;color:#75715e&#34;&gt;# Run a build for a container&lt;/span&gt;
podman run --rm  -v ICONS_DIR src -v NATIVEFIER_BUILD_DIR target jiahaog/nativefier --icon /src/ICON --name NAME -p linux -a x64 URL /target&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command had a few parameters to swap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ICONS_DIR&lt;/code&gt;: the directory that contains the application icons to build
with.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NATIVEFIER_BUILD_DIR&lt;/code&gt;: the directory to save the application builds to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ICON&lt;/code&gt;: The filename of the image to use for the icon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NAME&lt;/code&gt;: The name of the application (ex: &lt;code&gt;pocket&lt;/code&gt; or &lt;code&gt;homeassistant&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URL&lt;/code&gt;: The &lt;em&gt;url&lt;/em&gt; of the webapp to build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This command spins up a podman container, passes our variables through, and builds a
nativefier app. After finishing, the container automatically deletes itself.&lt;/p&gt;

&lt;h2 id=&#34;automating-the-process&#34;&gt;Automating the process&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve figured out how to run nativefier with podman, we can focus on
writing the automation. Like I have &lt;a href=&#34;../../post/foundryvtt-service-ansible-role/&#34;&gt;done
previously&lt;/a&gt;, I will be implementing the
automation by creating a new role to use in my ansible playbooks. If you are
unfamilar with roles, checkout the &lt;a href=&#34;../../post/ansible-quickstart/&#34;&gt;ansible quickstart
post&lt;/a&gt; I wrote earlier this year.&lt;/p&gt;

&lt;p&gt;To start, I&amp;rsquo;ll create a folder for the new role, with &lt;code&gt;tasks&lt;/code&gt;, &lt;code&gt;defaults&lt;/code&gt;, &lt;code&gt;files&lt;/code&gt;, and
&lt;code&gt;templates&lt;/code&gt; sub directories.&lt;/p&gt;

&lt;h3 id=&#34;vars&#34;&gt;Vars&lt;/h3&gt;

&lt;p&gt;First, lets define default values for the variables we will use in tasks and template files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;user&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ ansible_user_id }}&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# User to run as&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;nativefier_build_dir&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Location to build apps at&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;nativefier_dir&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/{{ user }}/Builds/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Location to move completed builds&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;icons_dir&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/{{ user }}/.local/share/icons/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# App Icon location&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;applications_dir&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/{{ user }}/.local/share/applications/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# desktop entry location&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will define one more variable which won&amp;rsquo;t have a default, &lt;code&gt;nativefier_apps&lt;/code&gt;. However, I&amp;rsquo;ll
talk about that later when we use the role in a playbook.&lt;/p&gt;

&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;Next, lets create the one template file we need for this role: an
&lt;code&gt;application.desktop&lt;/code&gt; file. Create a new file in the &lt;code&gt;templates&lt;/code&gt; directory
named &lt;code&gt;nativefier.desktop.j2&lt;/code&gt; and paste in the following contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[Desktop Entry]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ item.name }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Comment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Nativefier app for {{ item.name }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Exec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ nativefier_dir }}/{{ item.name }}-linux-x64/{{ item.name }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Terminal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Application&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Icon&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ item.icon }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Categories&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Multimedia;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;TryExec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ nativefier_dir }}/{{ item.name }}-linux-x64/{{ item.name }}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This template will take the variables for each nativefier app we define in the
playbook, and use them to fill out a desktop file for each app.&lt;/p&gt;

&lt;h3 id=&#34;files&#34;&gt;Files&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/automated-nativefier-app-builds/icons.png&#34;&gt;&lt;img alt=&#34;The icons folder&#34; src=&#34;../../img/posts/automated-nativefier-app-builds/icons.png&#34; style=&#34;max-width:
100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The role&amp;rsquo;s files folder, containing the app icons&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Before writing tasks, there is one more role directory to fill: &lt;code&gt;files&lt;/code&gt;.  We
want to include the icon files for each application in this role. So,  fill the
&lt;code&gt;files&lt;/code&gt; sub-directory with the icon files to use.&lt;/p&gt;

&lt;h3 id=&#34;tasks&#34;&gt;Tasks&lt;/h3&gt;

&lt;p&gt;Time to write the tasks. Create and open up a &lt;code&gt;main.yml&lt;/code&gt; file in the
tasks sub-directory.&lt;/p&gt;

&lt;p&gt;The first few tasks will check and ensure that the directories we intend to use
exist. This is generally a good practice to prevent playbooks from breaking due
to missing folders:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ensure Icon dir exists&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ icons_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;state&lt;/span&gt;: directory

- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ensure applications dir exists&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ applications_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;state&lt;/span&gt;: directory

- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ensure {{ nativefier_build_dir }} exists&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_build_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;state&lt;/span&gt;: directory

- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ensure {{ nativefier_dir }} exists&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;state&lt;/span&gt;: directory&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;managing-icon-files&#34;&gt;Managing Icon Files&lt;/h4&gt;

&lt;p&gt;Next, add a small task that will copy the icons we included with the role,
to the user&amp;rsquo;s local icon folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: Move icons to local folder
  &lt;span style=&#34;color:#66d9ef&#34;&gt;copy&lt;/span&gt;: src=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ item.icon }}&amp;#34;&lt;/span&gt; dest=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ icons_dir }}/{{ item.icon }}&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will ensure that all the icons are already in place when we build both the
nativefier app and the &lt;code&gt;.deskop&lt;/code&gt; files.&lt;/p&gt;

&lt;h4 id=&#34;automating-the-podman-builds&#34;&gt;Automating the podman builds&lt;/h4&gt;

&lt;p&gt;We can now define a few tasks that will pull and run the nativefier container
using podman. &lt;em&gt;(Note: This could be done with docker&amp;hellip; but I prefer podman XD)&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: Pull down nativefier container image
  &lt;span style=&#34;color:#66d9ef&#34;&gt;shell&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;podman pull jiahaog/nativefier&amp;#34;&lt;/span&gt;

- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: Build Nativefier app via podman
  &lt;span style=&#34;color:#66d9ef&#34;&gt;shell&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;podman run --rm --security-opt label=disable -v {{ icons_dir }}:/src -v {{ nativefier_build_dir }}:/target jiahaog/nativefier --icon /src/{{ item.icon }} --name {{ item.name}} -p linux -a x64 {{ item.url }} /target&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;

- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: Clean out nativefier dir
  &lt;span style=&#34;color:#66d9ef&#34;&gt;become&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_dir }}/{{ item.name }}-linux-x64&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;state&lt;/span&gt;: absent
  &lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# I don&amp;#39;t love this, but copy was too slow&lt;/span&gt;
- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: Move Builds to Nativefier Location
  &lt;span style=&#34;color:#66d9ef&#34;&gt;become&lt;/span&gt;: True
  &lt;span style=&#34;color:#66d9ef&#34;&gt;shell&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mv {{ nativefier_build_dir }}/{{ item.name }}-linux-x64 {{ nativefier_dir }}/{{ item.name }}-linux-x64&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These tasks also move the built app to the final location.&lt;/p&gt;

&lt;h4 id=&#34;manaing-application-files&#34;&gt;Manaing Application Files&lt;/h4&gt;

&lt;p&gt;Lastly, with icons in place and the application builds complete, we can create the application
entry files by adding this final task:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: Generate Application Desktop Files
  &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;src&lt;/span&gt;: templates/nativefier.desktop.j2
    &lt;span style=&#34;color:#66d9ef&#34;&gt;dest&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ applications_dir }}/{{ item.name }}.desktop&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And there we go, that&amp;rsquo;s it! Well&amp;hellip; sort of.&lt;/p&gt;

&lt;h2 id=&#34;selinux-woes&#34;&gt;Selinux woes&lt;/h2&gt;

&lt;p&gt;While this &amp;lsquo;&lt;em&gt;worked on my computer&lt;/em&gt;&amp;rsquo;, when I tested it on my laptop and
in some VMs&amp;hellip; it failed.&lt;/p&gt;

&lt;h3 id=&#34;issues&#34;&gt;Issues&lt;/h3&gt;

&lt;p&gt;Every time I ran the playbook, I hit this error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Error during build. Run with --verbose &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; details. &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Error: EACCES: permission denied, mkdir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/target/linux-x64-template&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  errno: -13,
  code: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EACCES&amp;#39;&lt;/span&gt;,
  syscall: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mkdir&amp;#39;&lt;/span&gt;,
  path: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/target/linux-x64-template&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was able to tell the error occurred while running the podman container. I
assumed it might be &lt;code&gt;selinux&lt;/code&gt; related, but was unable to sort out a solution
right away.&lt;/p&gt;

&lt;h3 id=&#34;the-fix&#34;&gt;The Fix&lt;/h3&gt;

&lt;p&gt;Eventually after browsing the internet, I learned that my easiest solution was
to add the option &lt;code&gt;--security-opt label=disable&lt;/code&gt; to my &lt;code&gt;podman run&lt;/code&gt; command, to
turn off label separation for the container. I&amp;rsquo;m sure there is a better, more
secure soltion I could do. However, I figured this was at least a good compromise of
being easy to implement, but more secure than the common (and wrong) suggestion
of &amp;ldquo;&lt;em&gt;just disable selinux&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;one-last-fix&#34;&gt;One last fix&amp;hellip;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;drwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100999&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100999&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt; Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; 20:40 jellyfin-linux-x64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, I wanted to add one more cleanup task. My builds had the ugly uid/gid
pair of &lt;code&gt;100999 100999&lt;/code&gt;, so I a task to change ownership to the &lt;code&gt;user&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: Change Permissons of Nativefier Dirs
  &lt;span style=&#34;color:#66d9ef&#34;&gt;become&lt;/span&gt;: True
  &lt;span style=&#34;color:#66d9ef&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_dir }}/{{ item.name }}-linux-x64&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;owner&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ user }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;group&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ user }}&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that change:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;drwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ryan ryan  &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt; Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; 20:40 jellyfin-linux-x64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Much better!&lt;/p&gt;

&lt;h2 id=&#34;example-adding-it-to-my-playbooks&#34;&gt;Example adding it to my playbooks&lt;/h2&gt;

&lt;p&gt;With the role complete, it is &lt;em&gt;finally&lt;/em&gt; time to add it to a playbook. I define
playbooks to provision all of my machines, so I will just add it to them. First
make sure the role is added to the list of roles used by the playbook.  For
example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  roles:
    - apps/nativefier&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, define a new var named &lt;code&gt;nativefier_apps&lt;/code&gt;. This variable is a list of
dictionaries, with each dictionary providing the values for a different
nativefier application. Each nativefier build requires three variables to be
defined:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The name of the application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icon&lt;/code&gt;: The filename (including ext) of the icon file to for the application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: The address for the webpage to build as a nativefier app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, to build my &lt;code&gt;pocket&lt;/code&gt;, &lt;code&gt;fastmail&lt;/code&gt;, and &lt;code&gt;homeassistant&lt;/code&gt; apps, I added the
following to my playbook:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nativefier_apps&lt;/span&gt;:
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: pocket
    &lt;span style=&#34;color:#66d9ef&#34;&gt;icon&lt;/span&gt;: pocket.png
    &lt;span style=&#34;color:#66d9ef&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://app.getpocket.com&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: fastmail
    &lt;span style=&#34;color:#66d9ef&#34;&gt;icon&lt;/span&gt;: fastmail.png
    &lt;span style=&#34;color:#66d9ef&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.fastmail.com&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: homeassistant
    &lt;span style=&#34;color:#66d9ef&#34;&gt;icon&lt;/span&gt;: homeassistant.png
    &lt;span style=&#34;color:#66d9ef&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://homeassistant.local:8123&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That should be it! Afterwards, my playbooks could build and configure all
my nativefier applications automatically!&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/automated-nativefier-app-builds/nativefier-windows.png&#34;&gt;&lt;img alt=&#34;My desktop covered in nativefier apps&#34; src=&#34;../../img/posts/automated-nativefier-app-builds/nativefier-windows.png&#34; style=&#34;max-width:
100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;My desktop covered in some of my nativefier apps.&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;I have wanted to create this role for a very long time and am glad I finally
did. Nativefier is such an amazing tool, and paring it with podman and ansible
has somehow managed to make it shine even more. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setup Optfine with Minecraft Flatpak Install</title>
      <link>http://ryan.himmelwright.net/post/setup-optifine-minecraft-flatpak/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/setup-optifine-minecraft-flatpak/</guid>
      <description>&lt;p&gt;Over the past few months, I started to play Minecraft (Java) on my desktop
again.  After &lt;a href=&#34;../../post/rx580-upgrade&#34;&gt;upgrading my graphics card&lt;/a&gt;, I wanted to
install some shaders. However, unlike when I was in college, I now install and
play minecraft using &lt;a href=&#34;http://flatpak.org&#34;&gt;flatpak&lt;/a&gt;. While flatpak makes
installing minecraft convenient, it also complicates enabling mods like
Optifine. So&amp;hellip;  here&amp;rsquo;s how it&amp;rsquo;s done :) .&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Before we start, I have only done this on Fedora Linux. It is possible
that paths and locations may differ on other distros&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;install-the-minecraft-flatpak&#34;&gt;Install the Minecraft Flatpak&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/setup-optifine-minecraft-flatpak/flathub_page.png&#34;&gt;
&lt;img alt=&#34;The Minecraft Flathub Page&#34; src=&#34;../../img/posts/setup-optifine-minecraft-flatpak/flathub_page.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The Minecraft Flathub page&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;First, lets install the minecraft flatpak. Ensure that &lt;a href=&#34;https://flatpak.org/setup/Fedora/&#34;&gt;flathub is
enabled&lt;/a&gt;, then run the following command
to install Minecraft:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;flatpak install com.mojang.Minecraft&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When it finishes, open up the launcher and login to verify that everything is
working.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Logging into the official launcher at least once is required to install
Optifine in the later steps).&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;optifine&#34;&gt;Optifine&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://optifine.net/home&#34;&gt;Optifine&lt;/a&gt; is a Minecraft optimiziation mod which
supports installing shader and texture packs. Simply put, this makes minecraft
look better. Additionally, some shaders can optimize the game to &lt;em&gt;perform&lt;/em&gt;
better too. I use a shader that renders some textures more realistically
from the default, but nothing too fancy.&lt;/p&gt;

&lt;h4 id=&#34;download&#34;&gt;Download&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/setup-optifine-minecraft-flatpak/optifine_download.png&#34;&gt;
&lt;img alt=&#34;Optifine Download Page&#34; src=&#34;../../img/posts/setup-optifine-minecraft-flatpak/optifine_download.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Optifine Download page&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;To obtain optifine, go to the &lt;a href=&#34;https://optifine.net/downloads&#34;&gt;downloads page&lt;/a&gt;
and download the version which corresponds to the minecraft version you are
using. If you are running a version which is more recent, you might have to try
a &lt;em&gt;Preview version&lt;/em&gt; of optifine. In my experience, the previews have worked
without issue.&lt;/p&gt;

&lt;h3 id=&#34;install-optifine&#34;&gt;Install Optifine&lt;/h3&gt;

&lt;h4 id=&#34;finding-the-minecraft-folder&#34;&gt;Finding the minecraft folder&lt;/h4&gt;

&lt;p&gt;Before we install Optifine, there is one piece of information we need to know:
the &lt;code&gt;.minecraft&lt;/code&gt; folder location. This is where running a flatpak verion
diverges from a normal minecraft install, as the folder will not be at
&lt;code&gt;~/.minecraft/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is because flatpak applications are sandboxed from the system. While good
for security, it means that the &lt;em&gt;&amp;lsquo;home directory&amp;rsquo;&lt;/em&gt; observed inside the application
is different from the user&amp;rsquo;s (like a &lt;code&gt;chroot&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/setup-optifine-minecraft-flatpak/flatpak_minecraft_folder.png&#34;&gt;
&lt;img alt=&#34;The flatpak minecraft folder&#34; src=&#34;../../img/posts/setup-optifine-minecraft-flatpak/flatpak_minecraft_folder.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The flatpak minecraft folder&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;On my computer, the flatpak applications are located at &lt;code&gt;/home/ryan/.var/app/&lt;/code&gt;,
making my &amp;lsquo;&lt;code&gt;/home/ryan/.minecraft/&lt;/code&gt;&amp;rsquo; folder &lt;em&gt;actually&lt;/em&gt; at
&lt;code&gt;/home/ryan/.var/app/com.mojang.Minecraft/data/minecraft/&lt;/code&gt;. Find and remember
this location. &lt;em&gt;(Hint: it should be similar to mine)&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;install-optifine-1&#34;&gt;Install Optifine&lt;/h4&gt;

&lt;p&gt;Back to Optifine&amp;hellip;&lt;/p&gt;

&lt;p&gt;To run the optifine installer, open a terminal, navigate to the downloaded
&lt;code&gt;jar&lt;/code&gt; file, and execute it using java:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## If java is not installed:&lt;/span&gt;
sudo dnf install java-openjdk-latest
&lt;span style=&#34;color:#75715e&#34;&gt;## Then:&lt;/span&gt;
cd ~/Downloads
java -jar preview_OptiFine_1.16.3_HD_U_G3_pre1.jar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will open the installer.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/setup-optifine-minecraft-flatpak/optifine_install.png&#34;&gt;
&lt;img alt=&#34;The optifine installer&#34; src=&#34;../../img/posts/setup-optifine-minecraft-flatpak/optifine_install.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The Optifine installer window&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Switch the &lt;em&gt;Folder&lt;/em&gt; to the &lt;code&gt;minecraft&lt;/code&gt; one we found previously, and click
&lt;em&gt;Install&lt;/em&gt;. Note: If the official minecraft launcher was not already logged
into, this step will &lt;em&gt;not&lt;/em&gt; work as it will fail to find minecraft (the launcher
downloads content on the first login).&lt;/p&gt;

&lt;h3 id=&#34;configure-the-optifine-launcher&#34;&gt;Configure The Optifine Launcher&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/setup-optifine-minecraft-flatpak/select_optifine.png&#34;&gt;
&lt;img alt=&#34;The minecraft launcher, selecting optifine&#34; src=&#34;../../img/posts/setup-optifine-minecraft-flatpak/select_optifine.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Select Optifine in the Minecraft Launcher&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;With Optifine installed, we need to select it in the minecraft launcher. If
Optifine was correctly installed, it should now be an option at the
bottom left of the window (Next to settings).&lt;/p&gt;

&lt;h4 id=&#34;add-your-own-installation&#34;&gt;Add your own installation&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/setup-optifine-minecraft-flatpak/diy_launcher.png&#34;&gt;
&lt;img alt=&#34;Creating a new minecraft launcher install&#34; src=&#34;../../img/posts/setup-optifine-minecraft-flatpak/diy_launcher.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Creating a Minecraft launcher for Optifine&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;If for some reason optifine &lt;em&gt;is not&lt;/em&gt; an option, a custom launcher can be
added. To create one, click &lt;em&gt;Installations&lt;/em&gt; at the top of the
launcher, and hit the &lt;em&gt;New&lt;/em&gt; button. From that window, give the install a name
and select your latest Optifine version from the drop-down menu. If optifine
isn&amp;rsquo;t an option, it likely wasn&amp;rsquo;t installed correctly or in the right location.&lt;/p&gt;

&lt;p&gt;Lastly, remember to &lt;em&gt;once again&lt;/em&gt; switch the &lt;em&gt;Game Directory&lt;/em&gt; to the location of
the flatpak minecraft folder we&amp;rsquo;ve been using. Hit &lt;em&gt;Create&lt;/em&gt; and switch to the
new profile.&lt;/p&gt;

&lt;h3 id=&#34;shaders&#34;&gt;Shaders&lt;/h3&gt;

&lt;p&gt;The main motivation behind adding Optifine is the ability to use shaders. With
Optifine all configured, lets finish what we came here for.&lt;/p&gt;

&lt;h4 id=&#34;download-1&#34;&gt;Download&lt;/h4&gt;

&lt;p&gt;First, find a shader. I have been using the
&lt;a href=&#34;https://bitslablab.com/bslshaders/&#34;&gt;BSL&lt;/a&gt; shader pack and love it. It keeps a
more &amp;lsquo;classic&amp;rsquo; minecraft style, without changing too much. However, it improves
key visuals like the lighting, water, and  swaying plants.&lt;/p&gt;

&lt;p&gt;When you find a shader you want, just download the package and move it to the
&lt;em&gt;shaders&lt;/em&gt; folder in our flatpak minecraft folder.
&lt;a href=&#34;https://bitslablab.com/bslshaders/#download&#34;&gt;Here&lt;/a&gt; is where I downloaded the
one I use.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;FYI, not every shader I tried worked.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;enable-in-game&#34;&gt;Enable in game&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/optifine-minecraft-flatpak/minecraft_video_settings.png&#34;&gt;
&lt;img alt=&#34;Minecraft Video Settings&#34; src=&#34;../../img/posts/setup-optifine-minecraft-flatpak/minecraft_video_settings.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Minecraft Video Settings, with Shaders setting&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;With the shader package in place, we should be able to enable it in the game.
Fire up minecraft (using the optifine install), and select &lt;em&gt;Options&lt;/em&gt;, then &lt;em&gt;Video
Settings&lt;/em&gt;. From there, you should now see a newly available &lt;em&gt;Shaders&lt;/em&gt; option.
Click it to open up the shaders menu.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/optifine-minecraft-flatpak/minecraft_shader_settings.png&#34;&gt;
&lt;img alt=&#34;Minecraft Shader Settings&#34; src=&#34;../../img/posts/setup-optifine-minecraft-flatpak/minecraft_shader_settings.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Minecraft Shader Settings&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;If the shader package was moved to the correct location, it &lt;em&gt;should&lt;/em&gt; show up
here. If so, click the desired shader (the laucher might restart when
a new shader is selected). If not, open the &lt;em&gt;Shaders Folder&lt;/em&gt;
to double check the location.&lt;/p&gt;

&lt;p&gt;After picking the shader, hit &lt;em&gt;Done&lt;/em&gt; and check it out!&lt;/p&gt;

&lt;h3 id=&#34;conlusion&#34;&gt;Conlusion&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/optifine-minecraft-flatpak/minecraft_with_shaders.png&#34;&gt;
&lt;img alt=&#34;Minecraft with Shaders&#34; src=&#34;../../img/posts/setup-optifine-minecraft-flatpak/minecraft_with_shaders.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Minecraft using the BLS Shaders&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Much better! Shaders can make minecraft feel like a whole new game, and are a
blast to play with. While they might seem difficult to setup with a flatpak
install, it really isn&amp;rsquo;t bad &lt;em&gt;if&lt;/em&gt; you know (and remember XD) &lt;em&gt;where&lt;/em&gt; the
minecraft folder is located.  Enjoy!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS: For those that read &lt;a href=&#34;../../post/virtio-3d-vms/&#34;&gt;my previous post&lt;/a&gt;: yes, I
did use a virgil VM to get clean install screenshots for this post&amp;hellip; including
the gameplay one!&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running VMs with VirtIO 3D Acceleration</title>
      <link>http://ryan.himmelwright.net/post/virtio-3d-vms/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/virtio-3d-vms/</guid>
      <description>&lt;p&gt;While on vacation the other week, the only laptop I brought along was &lt;a href=&#34;http://ryan.himmelwright.net/post/new-2019-16inch-mbp/&#34;&gt;my
macbook pro&lt;/a&gt;. That
being said, I still wanted the ability to jump into Linux while I was away.  I
needed to virtualize. I&amp;rsquo;ve used VirtualBox in the past, and while it&amp;rsquo;s &lt;em&gt;fine&lt;/em&gt;
for running headless installs, I find that it is not a great experience on
macOS when trying to run a full desktop environment. So I downloaded the free
trial of &lt;a href=&#34;https://www.parallels.com/blogs/just-released-parallels-desktop-for-mac/&#34;&gt;parallels desktop
15&lt;/a&gt;,
and honestly&amp;hellip; it was great. Afterwards, I was motivated to improve the
experience of VMs running on my (Linux) desktop.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/parallels.png&#34;&gt;
&lt;img alt=&#34;Parallels Desktop on MacOS&#34; src=&#34;../../img/posts/virtio-3d-vms/parallels.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Parallels desktop on MacOS&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Parallels handled graphics on both my Windows and Linux guests wonderfully. I
would full-screen the VM and it felt like I was running that OS directly on my
macbook (for the most part). I was sad when the trial was over, but decided not
to buy the subscription. My main reason being&amp;hellip; my VM computer is &lt;em&gt;not&lt;/em&gt; my
macbook, it&amp;rsquo;s my Linux desktop.&lt;/p&gt;

&lt;p&gt;I love libvirt and virt-manager, but using parallels showed me that I really
needed to figure out how to improve the graphics situation of my VMs to catch
up. I wanted to be able to work in guest VMs, without a lagging
UI or &lt;em&gt;feeling&lt;/em&gt; like I was &lt;em&gt;in&lt;/em&gt; a VM.&lt;/p&gt;

&lt;h3 id=&#34;vfio-gpu-passthrough&#34;&gt;VFIO - GPU Passthrough&lt;/h3&gt;

&lt;p&gt;Prior to my trip, I had been experimenting &lt;em&gt;once again&lt;/em&gt; with VFIO&amp;hellip; and
actually got it working* for the first time. If you don&amp;rsquo;t know what this means,
basically in Linux it is possible to pass a full device, like a GPU, through to
a VM to be used directly. The technology was made more widely known a few years
ago from the &amp;ldquo;X Gamers, 1 CPU&amp;rdquo; serries of videos Linux Tech Tips made.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LuJYMCbIbPk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&#34;caption&#34;&gt;The first video of the serries, 2 Gaming PCs 1 Tower&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;I was able to temporarily run both Proxmox and Unraid on my desktop, and pass
my gpu directly to Fedora VMs.  While it was a neat experiment, I realized it
can also be quite a pain.&lt;/p&gt;

&lt;p&gt;I currently only have one GPU in my desktop, so to pass it to the VM I had to
disable it on the host. Not having a GPU for the host system meant that I had
to start the VMs from another device, which honestly isn&amp;rsquo;t &lt;em&gt;that&lt;/em&gt; bad. The much
worse issue however, was that the gpu would often get stuck while being passed
around, so I had to reboot my host whenever the VM restarted&amp;hellip; which defeated
the point of using a VM instead of multi-booting.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6T_-HMkgxt0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&#34;caption&#34;&gt;Gaming on Linux continues to get better over time&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;So to &lt;em&gt;properly&lt;/em&gt; utilize VFIO and have a more stable setup, I would want a
second GPU. In truth though, I realized this setup wasn&amp;rsquo;t what I was looking
for. KVM gpu passthrough is a great option if you run Linux as your main
computer, but want to be able to boot into a Windows VM to play games. But GPU
passthrough is slowly becoming overkill even for &lt;em&gt;that&lt;/em&gt;, as gaming support on
Linux keeps getting better.&lt;/p&gt;

&lt;p&gt;Aside from having an occasional Windows VM to play around with, I mostly want
to run Linux VMs on a Linux host. I needed to figure out how to let my VMs
utilize the &lt;em&gt;power&lt;/em&gt; of my GPU, without the complications of GPU passthrough&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;virgil&#34;&gt;Virgil&lt;/h3&gt;

&lt;p&gt;Introducing, &lt;a href=&#34;https://virgil3d.github.io&#34;&gt;virgil&lt;/a&gt;. According to the
project&amp;rsquo;s website:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Virgil is a research project to investigate the possibility of creating a virtual 3D GPU for use inside qemu virtual machines, that allows the guest operating system to use the capabilities of the host GPU to accelerate 3D rendering. The plan is to have a guest GPU that is fully independent of the host GPU.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, Virgil essentially allows libvirt to create &lt;em&gt;virtual 3D GPUs&lt;/em&gt;, that work
with the host GPU for 3D acceleratuon.  This means, that I &lt;em&gt;should&lt;/em&gt; be able to
get high performing VMs, including the graphics, on my Linux desktop.&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Enabling virgil for a VM using virt-manager actually ended up be much easier
that I had anticipated. Here is how to do it:&lt;/p&gt;

&lt;h3 id=&#34;create-a-vm&#34;&gt;Create a VM&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/new_fedora_vm.png&#34;&gt;
&lt;img alt=&#34;Newly Created Fedora VM&#34; src=&#34;../../img/posts/virtio-3d-vms/new_fedora_vm.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Newly created Fedora VM&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;First, create and install a new virtual machine using &lt;code&gt;virt-manager&lt;/code&gt;. I
recommend going through your normal install process and then boot into the
installed system once, just to ensure that everything works as expected. If
things look good, shutdown the VM and open up the settings window.&lt;/p&gt;

&lt;h3 id=&#34;enable-virtio-and-3d-acceleration&#34;&gt;Enable VirtIO and 3D Acceleration&lt;/h3&gt;

&lt;h4 id=&#34;spice-settings&#34;&gt;Spice Settings&lt;/h4&gt;

&lt;p&gt;In the settings menu, open up the &lt;em&gt;Display Spice&lt;/em&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;a href=&#34;img/posts/virtio-3d-vms/display_spice_config_post.png&#34;&gt;
&lt;img alt=&#34;Virt-manager&#39;s Spice settings for a VM&#34; src=&#34;../../img/posts/virtio-3d-vms/display_spice_config_post.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;In the VM&amp;rsquo;s &amp;lsquo;Display Spice&amp;rsquo; config, select &amp;lsquo;None&amp;rsquo; for
Listen type, and check the box for OpenGL&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Spice server&lt;/code&gt; for &lt;code&gt;Type:&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt; for &lt;code&gt;Listen type:&lt;/code&gt; (virgil only
works on local VMs right now). Lastly, make sure that the &lt;code&gt;OpenGL&lt;/code&gt; checkbox
&lt;em&gt;is&lt;/em&gt; checked. Hit &lt;code&gt;Apply&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;virtio-settings&#34;&gt;Virtio Settings&lt;/h4&gt;

&lt;p&gt;Next, select the &lt;em&gt;Video Virtio&lt;/em&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;img/posts/virtio-3d-vms/video_config_post.png&#34;&gt;
&lt;img alt=&#34;Virt-manager&#39;s Video settings for a VM&#34; src=&#34;../../img/posts/virtio-3d-vms/video_config_post.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;In the VM&amp;rsquo;s video settings, switch to Virtio and select 3D
acceleration&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Switch to &lt;code&gt;Virtio&lt;/code&gt; for &lt;code&gt;Model:&lt;/code&gt;, and make sure to check the &lt;code&gt;3D acceleration&lt;/code&gt;
checkbox. That&amp;rsquo;s it! Hit apply, start up the VM, and verify that it is working.&lt;/p&gt;

&lt;h2 id=&#34;testing-and-comparisons&#34;&gt;Testing and Comparisons&lt;/h2&gt;

&lt;h3 id=&#34;youtube-video-playback&#34;&gt;Youtube Video Playback&lt;/h3&gt;

&lt;p&gt;While configuring this for the first time, there were a few benchmarks I used
to tell if and how well it was working. The first one, was simply opening up
Firefox and trying to play a fullscreen Youtube Video (at 1440p).&lt;/p&gt;

&lt;p&gt;Now to be fair, the video playback was still &lt;em&gt;okay&lt;/em&gt; before I made this change.
This wasn&amp;rsquo;t a good measure, but rather an initial test.&lt;/p&gt;

&lt;h3 id=&#34;unigine-heaven-benchmark&#34;&gt;Unigine Heaven Benchmark&lt;/h3&gt;

&lt;p&gt;My next step was to give the VM a &lt;em&gt;real&lt;/em&gt; GPU test, so I downloaded the &lt;a href=&#34;https://benchmark.unigine.com/heaven&#34;&gt;Unigine
Heaven Benchmark&lt;/a&gt;. First I got my
baseline by running the benchmark directly on my host system. &lt;em&gt;It should be
noted that I did have other applications running during all of these benchmarks&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/unigine_heaven_score_host_export.png&#34;&gt;
&lt;img alt=&#34;Unigine Heaven Benchmark - Host&#34; src=&#34;../../img/posts/virtio-3d-vms/unigine_heaven_score_host_export.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Unigine Heaven Benchmark running directly on the host (my
desktop)&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;So not bad, and roughly what I expected. Next, I tried running it in the VM&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/unigine_heaven_score_vm_export.png&#34;&gt;
&lt;img alt=&#34;Unigine Heaven Benchmark - VM&#34; src=&#34;../../img/posts/virtio-3d-vms/unigine_heaven_score_vm.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Unigine Heaven Benchmark running inside the VM with
&lt;em&gt;shared&lt;/em&gt; graphics&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;While not as good as on the host, it is a &lt;em&gt;very&lt;/em&gt; respectable result. Especially
after remembering that the VM had less cores and RAM assigned to it compared to
the host.&lt;/p&gt;

&lt;p&gt;Additionally, my default VM &lt;em&gt;wouldn&amp;rsquo;t even run&lt;/em&gt; the benchmark. I was
able to open it, but the load screen ran frame-by-frame. Turning on the
3D acceleration settings definitely made a difference.&lt;/p&gt;

&lt;h3 id=&#34;portal-2&#34;&gt;Portal 2&lt;/h3&gt;

&lt;p&gt;With the Unigine Heaven benchmark working in my VM, I decided to attempt the
next test&amp;hellip; playing a video game. Now, I have &lt;em&gt;zero&lt;/em&gt; intentions of running games in
my VMs, but this is the most common use case for having a GPU-passthrough
setup, so I wanted to see how this system compared.&lt;/p&gt;

&lt;p&gt;I decided to try running a classic game: Portal 2. It&amp;rsquo;s not a very resource
intensive game, but one that certainly does &lt;em&gt;not&lt;/em&gt; normally run well in my VMs.
I installed the game, started a level&amp;hellip;  and was immediately forced to stare
at the ground.&lt;/p&gt;

&lt;p&gt;Staring at my character&amp;rsquo;s feet, I was reminded that I was playing in a VM, and
that the game didn&amp;rsquo;t actually have my proper mouse capture. It only had the
input clicks from my host to the VM spice window, which wasn&amp;rsquo;t enough to
actually play the game.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/portal2_window.png&#34;&gt;
&lt;img alt=&#34;Playing Portal 2 in a Fedora VM&#34; src=&#34;../../img/posts/virtio-3d-vms/portal2_window.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Playing Portal2 at 2560x1440 resolution, inside my Fedora
VM.(I had it full screen but windowed it to show it was indeed in the VM)&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Anyway, after one VM shutdown and usb mouse pasthrough later&amp;hellip; I was playing
Portal 2! It was a little glitchy for the first few seconds, but afterwards ran
well.  I think the initial lag was likely due to the system heavily hitting the
&lt;em&gt;virtualized&lt;/em&gt; disk while loading the level. Regardless, I was thrilled.&lt;/p&gt;

&lt;h2 id=&#34;drawbacks-limitations&#34;&gt;Drawbacks/Limitations&lt;/h2&gt;

&lt;p&gt;While I&amp;rsquo;m very happy with the performance of my virtio VM, there are a few
drawbacks or limitations to keep in mind:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Need to pass through hardware devices&lt;/strong&gt;: &amp;hellip; like a mouse when gaming XD. This
could also be a webcam, microphone, flash drive, or even a full ssd if you need
better IO in the VM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux Guests Only:&lt;/strong&gt; While researching, I saw &lt;a href=&#34;https://www.youtube.com/watch?v=aBgYNDLXuyg&#34;&gt;conference talks about getting
virgl working on Windows&lt;/a&gt; , but I
&lt;em&gt;think&lt;/em&gt; it currently only works with Linux guests.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/other_working_distros.png&#34;&gt;
&lt;img alt=&#34;Both Manjaro and Pop_OS! worked fine&#34; src=&#34;../../img/posts/virtio-3d-vms/other_working_distros.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Both my Manjaro and Pop_OS! VMs worked just fine with
virgl&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Even on Linux, some Distros might freak out a bit&lt;/strong&gt;: I had weird issues
when trying it on some of my RHEL 8 VMs. The mouse pointer wouldn&amp;rsquo;t show
and the screen would glitch and flicker when running high graphics tasks. I&amp;rsquo;m
Not sure why it&amp;rsquo;s happening, but I&amp;rsquo;m guessing it might be related to older
software packages/kernel. I have tried it with Pop_OS! and Manjaro VMs and they
seem to work just fine.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/glitch_t470_fedora.png&#34;&gt;
&lt;img alt=&#34;My Fedora VMs didn&#39;t work on my T470 Thinkpad&#34; src=&#34;../../img/posts/virtio-3d-vms/glitchy_t470_fedora.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;My Fedora VMs on my T470 Thinkpad (intel graphics only)
didn&amp;rsquo;t seem to like virgl&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not entirely sure about hardware support&lt;/strong&gt;: So far my working VMs have all
been on my desktop, which has an AMD RX580 GPU. I tried using a Fedora guest
on my T470 Thinkpad which has integrated Intel graphics, but the screen was
all crazy at login. I don&amp;rsquo;t know what hardware is supported and
what isn&amp;rsquo;t. It is possible that different hardware might just need different
settings selected, but I have not played around enough yet to know for sure.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall, I love this setup. It allows me to utilie my desktop to it&amp;rsquo;s full
potential, by running VMs I can jump into and forget that I am in a
virtalized system. This works well when testing fedora packages, or maintaining
a &lt;a href=&#34;https://fedoraproject.org/wiki/Releases/Rawhide&#34;&gt;Rawhide&lt;/a&gt; machine. Virgl is
an awesome projects and I hope it continues to progress over time. If you
haven&amp;rsquo;t tried it yet, give it a shot!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PIA Client Interfering with Podman Containers</title>
      <link>http://ryan.himmelwright.net/post/pia-client-podman-issues/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/pia-client-podman-issues/</guid>
      <description>&lt;p&gt;Earlier this month, I woke up and tried to start working on my &lt;a href=&#34;../../post/pytest-parallel-website-tests/&#34;&gt;previous
post&lt;/a&gt;, but quickly hit a snag.
I was unable to start the
&lt;a href=&#34;https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/&#34;&gt;toolbox&lt;/a&gt;
container I use while working on my website. In fact, &lt;em&gt;none&lt;/em&gt; of my podman
containers would start.&lt;/p&gt;

&lt;h2 id=&#34;was-podman-broken&#34;&gt;Was Podman Broken?&lt;/h2&gt;

&lt;p&gt;Specifically, when I tried to start a container I encountered this error
message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;podman start website
Error: unable to start container &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f8ab31d42b9d04d051b23c65604e19748a9496f17bd3baab8e6f947eee8f3692&amp;#34;&lt;/span&gt;: creating cgroup directory &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/sys/fs/cgroup/net_cls/user.slice/user-1000.slice/user@1000.service/user.slice/libpod-f8ab31d42b9d04d051b23c65604e19748a9496f17bd3baab8e6f947eee8f3692.scope/container&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;: No such file or directory: OCI runtime command not found error&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, I attempted to use  podman on a different computer. It worked fine. I
compared version numbers and noticed that the second computer had a newer
version of podman installed. I figured that I had hit a bug that must now be fixed,
so I waited for the update to reach my desktop (it wasn&amp;rsquo;t available on that
machine yet for some reason).&lt;/p&gt;

&lt;p&gt;A day later when I ran my updates, the new version of &lt;code&gt;podman&lt;/code&gt; was installed, which
I thought would surely fix my problem. It didn&amp;rsquo;t. (ಠ_ಠ)&lt;/p&gt;

&lt;h2 id=&#34;the-issue&#34;&gt;The Issue&lt;/h2&gt;

&lt;p&gt;I started to scour the internet again to look for answers. Eventually, I
found &lt;a href=&#34;https://www.reddit.com/r/Fedora/comments/hqbo34/podman_cgroup_issues_on_f32/&#34;&gt;this reddit
post&lt;/a&gt;.
While reading it, the poster&amp;rsquo;s experience sounded &lt;em&gt;very&lt;/em&gt; similar to my own.
After reading some of the comments that connected the &lt;a href=&#34;https://www.privateinternetaccess.com&#34;&gt;private internet
access&lt;/a&gt; client to the original poster&amp;rsquo;s
issues, I suddenly remembered&amp;hellip; I had installed the &lt;a href=&#34;https://www.privateinternetaccess.com/pages/download&#34;&gt;PIA
client&lt;/a&gt; on my machine
earlier that week!&lt;/p&gt;

&lt;p&gt;Sure enough, when I checked the ownership of my &lt;code&gt;net_cls&lt;/code&gt; files (as suggested
in the thread), it looked like &lt;code&gt;piavpn&lt;/code&gt; was claiming group ownership of the
files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜  ~ ll /sys/fs/cgroup/net_cls
total &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.clone_children
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.procs
-r--r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.sane_behavior
drwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; root root   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 machine.slice
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 net_cls.classid
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 notify_on_release
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 release_agent
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 tasks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some commenters in the thread stated that the conflict went away after they
removed the PIA client.&lt;/p&gt;

&lt;h2 id=&#34;removing-the-pia-client&#34;&gt;Removing the PIA Client&lt;/h2&gt;

&lt;p&gt;As a result, I decided to un-install my PIA client. It wasn&amp;rsquo;t a major loss for
me, as I hadn&amp;rsquo;t used it in months. I only installed it to double check if it
was a service I wanted, or if I should cancel my subscription before it
auto-renewed later that month.&lt;/p&gt;

&lt;p&gt;At first, I couldn&amp;rsquo;t find an &lt;em&gt;un&lt;/em&gt;-install option, but eventually found it deep
in the settings. After removing the client, the &lt;code&gt;piavpn&lt;/code&gt; group went away&amp;hellip; sort
of. It still had a &lt;code&gt;1004&lt;/code&gt; gid, which I&amp;rsquo;m guessing &lt;em&gt;was&lt;/em&gt; the previous &lt;code&gt;piavpn&lt;/code&gt;
group.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜  ~ ll /sys/fs/cgroup/net_cls
total &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.clone_children
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.procs
-r--r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.sane_behavior
drwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 machine.slice
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 net_cls.classid
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 notify_on_release
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 release_agent
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 tasks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whatever the case&amp;hellip; podman still didn&amp;rsquo;t work.&lt;/p&gt;

&lt;h2 id=&#34;don-t-forget-to-reboot&#34;&gt;&amp;hellip; Don&amp;rsquo;t forget to Reboot!&lt;/h2&gt;

&lt;p&gt;I was furious. After calming down, I reasoned it probably still wasn&amp;rsquo;t working
due to cruft from the client lingering on my system (like the &lt;code&gt;1004&lt;/code&gt; group for
example), so I rebooted my desktop&amp;hellip; and it worked!&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In conclusion&amp;hellip; why did I write this post? This complication was a huge pain
to troubleshoot.  It was only by chance that I stumbled on that reddit post,
and would have had an even &lt;em&gt;harder&lt;/em&gt; time without it. I assume having at least
&lt;em&gt;one&lt;/em&gt; more page on the internet stating that podman and the PIA client don&amp;rsquo;t
play nice, might help others find the solution quicker. Hence, this post.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://media.giphy.com/media/3rgXBBaVvhPXk3NSnK/giphy.gif&#34; alt=&#34;Frustation meme&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Before I end, it is worth nothing that some users reported that configuring the PIA openvpn
profiles and using &lt;em&gt;them&lt;/em&gt; to connect to the VPN works without issue. It is just
the &lt;em&gt;client&lt;/em&gt; that breaks containers. So if you want to still use PIA (I let
mine expire. I don&amp;rsquo;t use it enough), give it a try!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My Three Required Gnome Extensions</title>
      <link>http://ryan.himmelwright.net/post/three-required-gnome-extensions/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/three-required-gnome-extensions/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.gnome.org&#34;&gt;Gnome&lt;/a&gt; is the default desktop environment for many
Linux distributions, including my distro of choice,
&lt;a href=&#34;https://getfedora.org&#34;&gt;Fedora&lt;/a&gt;. When Gnome 3 was first released, I had to
install a bunch of &lt;a href=&#34;https://extensions.gnome.org&#34;&gt;extensions&lt;/a&gt; to get a
functional experience. These days, between becoming more familar with the Gnome
workflow, and the Gnome team ironing out the rougher edges of the DE, I don&amp;rsquo;t
need nearly as many extensions to get going. However, there are still three
which I do not think I could live without.&lt;/p&gt;

&lt;h2 id=&#34;gnome-extensions&#34;&gt;Gnome Extensions&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/three-required-gnome-extensions/gnome-extensions.png&#34;&gt;
&lt;img alt=&#34;Gnome Extensions Website&#34; src=&#34;../../img/posts/three-required-gnome-extensions/gnome-extensions.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The Gnome Extensions website&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Gnome extensions are installable enhancements to the Gnome desktop environment.
They are obtained by going to the &lt;a href=&#34;https://extensions.gnome.org&#34;&gt;gnome extensions
website&lt;/a&gt; with a supported browser, installing the
plugin, and switching the tab of desired extensions to &amp;ldquo;On&amp;rdquo;. Extensions can
be further configured using the
&lt;a href=&#34;https://wiki.gnome.org/action/show/Apps/Tweaks?action=show&amp;amp;redirect=Apps%2FGnomeTweakTool&#34;&gt;Tweaks&lt;/a&gt;
desktop application.&lt;/p&gt;

&lt;h2 id=&#34;my-must-have-3&#34;&gt;My Must-Have 3&lt;/h2&gt;

&lt;h3 id=&#34;caffeine&#34;&gt;Caffeine&lt;/h3&gt;

&lt;p&gt;My first required extension is Caffeine, which adds a little coffee cup icon to
the status bar. When the cup is empty, the system behaves as normal. However,
when clicked, the cup &amp;lsquo;fills up&amp;rsquo; and caffeine will prevent the system from
suspending the display.&lt;/p&gt;

&lt;p&gt;This is useful when giving presentations to stop the screen from dimming off
during longer slides, or during Q&amp;amp;A time. I also use this if I have a secondary
computer displaying information, to prevent it from repeatedly logging me out. I
can temporarily pause my sleep settings, without having to actually go
in and change them.&lt;/p&gt;

&lt;h3 id=&#34;top-icons-plus&#34;&gt;Top Icons Plus&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/three-required-gnome-extensions/top-bars.png&#34;&gt;
&lt;img alt=&#34;Gnome top bars with and without extensions enabled&#34; src=&#34;../../img/posts/three-required-gnome-extensions/top-bars.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The right side of my top bar, without extensions (top),
and with the &lt;em&gt;caffeine&lt;/em&gt; and &lt;em&gt;top icons plus&lt;/em&gt; extensions enabled (bottom)&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Many applications still expect an icon to be visible, in a task bar, where the
application can to store settings in. However, Gnome will often hide these
icons, making them less accessible. Top icons plus moves these icons back to
the top status bar, like many people expect.&lt;/p&gt;

&lt;p&gt;I use this extension so that I can more easily see and control applications on
my system which &lt;em&gt;assume&lt;/em&gt; the icons to be visible. Top Icons plus also allows me
to choose where on the bar I want them located (left, center, right). I
usually just set them to the &amp;lsquo;right&amp;rsquo; side of the screen, with all the other
junk.&lt;/p&gt;

&lt;h3 id=&#34;sound-input-output-device-chooser&#34;&gt;Sound Input &amp;amp; Output Device Chooser&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/three-required-gnome-extensions/drop-downs.png&#34;&gt;
&lt;img alt=&#34;Dropdown Menu, with and without sound device chooser&#34; src=&#34;../../img/posts/three-required-gnome-extensions/drop-downs.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Top bar dropdown menu, with (right) and without (left) the
&lt;em&gt;Sound Input &amp;amp; Output Device Chooser&lt;/em&gt; extension enabled&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Lastly, the &lt;em&gt;Sound Input &amp;amp; Output Device Chooser&lt;/em&gt; plugin adds a drop-down menu
to the top bar where audio input and output devices can be easily switched.
Otherwise, I usually need to do this from the &lt;em&gt;sound&lt;/em&gt; section of the system
settings.&lt;/p&gt;

&lt;p&gt;As someone that switches between speakers and headphones all day, has 100%
remote meetings, and usually more than one microphone device connected to their
computer, this is probably my most &lt;em&gt;required&lt;/em&gt; plug-in. It makes my life
easier, and allows me to react quicker in a meeting if I notice that an
incorrect audio device is selected.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While I still use other extensions, these are the big three. I think default gnome
has gotten surprisingly usable, but I would probably struggle to use it if
these extensions were no longer available to me.  So, to the Gnome team&amp;hellip;
please consider adding the functionality of these items as defaults in Gnome.
If not, I understand. However, if that is the case&amp;hellip; Gnome community, please
don&amp;rsquo;t let these extensions become deprecated! Thanks :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Authorizing Thunderbolt 3 on Fedora Plasma</title>
      <link>http://ryan.himmelwright.net/post/fedora-kde-tb3/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/fedora-kde-tb3/</guid>
      <description>&lt;p&gt;After buying a &lt;a href=&#34;../../post/new-2019-16inch-mbp/&#34;&gt;16&amp;rdquo; MacBook Pro&lt;/a&gt; the other month,
I&amp;rsquo;ve been using a Thunderbolt 3 hub to connect it to my periphery devices.
Luckily, in addition to the macbook, I am able to use the hub with my my work
laptop when working from home. Normally, it works fine. However, last week I
reformatted the work laptop with the &lt;a href=&#34;https://spins.fedoraproject.org/kde/&#34;&gt;&lt;em&gt;KDE Plasma&lt;/em&gt; spin&lt;/a&gt; of
Fedora Workstation 31&amp;hellip; and my TB3 hub stopped playing nicely with it.
Here&amp;rsquo;s why.&lt;/p&gt;

&lt;h2 id=&#34;the-issue&#34;&gt;The Issue&lt;/h2&gt;

&lt;p&gt;Due to a NVIDIA Quadro M1000M in my lenovo P50 work laptop, I&amp;rsquo;ve been using
Gnome with Wayland, because that combination seems to have the least amount of
annoying trade-offs. While doing a system refresh, I figured I would see if
things are any different with a clean Fedora 31 Plasma install (they weren&amp;rsquo;t,
but that&amp;rsquo;s beyond this post).&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/fedora-kde-tb3/gnome-tb3-settings.png&#34;&gt;
&lt;img alt=&#34;Gnome Thunderbolt Settings&#34; src=&#34;../../img/posts/fedora-kde-tb3/gnome-tb3-settings.png&#34; style=&#34;max-width: 100%; padding: 5px 15px 10px 10px&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The Gnome desktop environment now has a thunderbolt pane
in the settings GUI&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Booting into the live cd, and later the installed system, I noticed that my
Thunderbolt 3 hub did &lt;em&gt;not&lt;/em&gt; work while I was in Plasma. That was fine. I
expected it really, because for security reasons Linux distros tend to disable
thunderbolt ports by default.  In gnome, there are now settings to authorize
it (which I guess I had done on my previous install, and forgot about).  In
Plasma however, I needed to install and configure &lt;code&gt;bolt&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;bolt&#34;&gt;Bolt&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/fedora-kde-tb3/bolt-install.png&#34;&gt;
&lt;img alt=&#34;Installing bolt with dnf&#34; src=&#34;../../img/posts/fedora-kde-tb3/bolt-install.png&#34; style=&#34;max-width: 100%; padding: 5px 15px 10px 10px&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;&lt;code&gt;bolt&lt;/code&gt; is in the Fedora repos and is easily installed with
&lt;code&gt;dnf&lt;/code&gt;&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;In Fedora, &lt;code&gt;bolt&lt;/code&gt; is in the repos (at least in Fedora 31+), so installing it is
easy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install bolt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once &lt;code&gt;bolt&lt;/code&gt; is installed, it isn&amp;rsquo;t a bad idea to check to make sure it is
running: &lt;code&gt;sudo systemctl bolt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/fedora-kde-tb3/bolt-systemctl-status.png&#34;&gt;
&lt;img alt=&#34;bolt systemctl status&#34; src=&#34;../../img/posts/fedora-kde-tb3/bolt-systemctl-status.png&#34; style=&#34;max-width: 100%; padding: 5px 15px 10px 10px&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Checking &lt;code&gt;bolt&lt;/code&gt; is running using &lt;code&gt;systemctl status&lt;/code&gt;&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;If the status shows that it isn&amp;rsquo;t running for some reason, it can be started
using &lt;code&gt;systemctl start bolt&lt;/code&gt;. Check the status again, and if it it &lt;em&gt;still&lt;/em&gt; is not
running&amp;hellip; sorry?&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/fedora-kde-tb3/boltctl.png&#34;&gt;
&lt;img alt=&#34;boltctl&#34; src=&#34;../../img/posts/fedora-kde-tb3/boltctl.png&#34; style=&#34;max-width: 100%; padding: 5px 15px 10px 10px&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;With bolt installed, the command &lt;code&gt;boltctl&lt;/code&gt; is available to use. The base command will
show information about attached thunderbolt devices. To see more &lt;code&gt;boltctl&lt;/code&gt;
commands, run &lt;code&gt;boltctl --help&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;authorizing&#34;&gt;Authorizing&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/fedora-kde-tb3/boltctl-authorize.png&#34;&gt;
&lt;img alt=&#34;boltctl authorize&#34; src=&#34;../../img/posts/fedora-kde-tb3/boltctl-authorize.png&#34; style=&#34;max-width: 100%; padding: 5px 15px 10px 10px&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Authorizing the device&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;In order to &lt;em&gt;use&lt;/em&gt; the thunderbolt 3 device, it needs to be authorized. To
authorize a device, first use a plain &lt;code&gt;boltctl&lt;/code&gt; command to get the &lt;code&gt;uuid&lt;/code&gt; of
the device. Next, call &lt;code&gt;boltctl authorize&lt;/code&gt; using the &lt;code&gt;uuid&lt;/code&gt; to authorize it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boltctl authorize &amp;lt;UUID HERE&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The device should now be authorized. When I authorized mine, some of my devices
started showing up automatically, while others needed to be disconnected and
replugged.&lt;/p&gt;

&lt;h2 id=&#34;enrolling&#34;&gt;Enrolling&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/fedora-kde-tb3/bresetoltctl-enroll.png&#34;&gt;
&lt;img alt=&#34;boltctl enroll&#34; src=&#34;../../img/posts/fedora-kde-tb3/boltctl-enroll.png&#34; style=&#34;max-width: 100%; padding: 5px 15px 10px 10px&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Enrolling the device for permanent use&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Authorizing a device enables it to be used, but doesn&amp;rsquo;t guarantee persistence.
While this may be desired to grant &lt;em&gt;temporary&lt;/em&gt; authorization to a device, many
users tend want their device to &lt;em&gt;always&lt;/em&gt; work, without having to manually
authorize it. In this case, the device should be &lt;em&gt;enrolled&lt;/em&gt; (like &lt;code&gt;systemctl enable&lt;/code&gt;).
Simply call &lt;code&gt;boltctl enroll&lt;/code&gt;, with the device UUID:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boltctl enroll &amp;lt;UUID HERE&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once enrolled, the device&amp;rsquo;s UUID will be recorded and added to a database. By
default, the device will now automatically be authorized whenever it is
connected.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it. While the solution isn&amp;rsquo;t very difficult, it can be frustrating to
figure out when it appears that the thunderbolt device simply is not working.
Regardless, I&amp;rsquo;m glad that I now know about &lt;code&gt;bolt&lt;/code&gt; and how to use it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setup a Runner VM for Gitlab</title>
      <link>http://ryan.himmelwright.net/post/create-gitlab-runner/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/create-gitlab-runner/</guid>
      <description>&lt;p&gt;I play around with CI/CD pipelines quite a bit, both at home and at work. I have
mostly used Jenkins, but I wanted to see how Gitlab&amp;rsquo;s CI/CD tooling has
progressed over the last year. So, I decided to try to use Gitlab to manage the
automated build and deployments of a personal project I&amp;rsquo;ve been working on.
The first step of the process was to setup a runner my Gitlab instance could
use for the builds.&lt;/p&gt;

&lt;h2 id=&#34;setup-a-machine-vm&#34;&gt;Setup a Machine/VM&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/create-gitlab-runner/fedora-vm-install.png&#34;&gt;
&lt;img alt=&#34;Installing a new Fedora30 VM in Virt-Manager&#34; src=&#34;../../img/posts/create-gitlab-runner/fedora-vm-install.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Installing a new Fedora 30 VM in Virt-Manager for my runner&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;This will be a BYOG post (bring your own Gitlab). I already
&amp;ldquo;&lt;em&gt;had one laying around&lt;/em&gt;&amp;rdquo;, so I won&amp;rsquo;t cover setting that up.&lt;/p&gt;

&lt;p&gt;Your runner needs may differ, but in this post I am installing runner on a
Fedora 30 VM. I will also be using both &lt;a href=&#34;https://buildah.io/&#34;&gt;buildah&lt;/a&gt; and
&lt;a href=&#34;https://podman.io/&#34;&gt;podman&lt;/a&gt; for this project.&lt;/p&gt;

&lt;h4 id=&#34;some-things-to-note-consider-during-vm-setup&#34;&gt;Some things to note/consider during VM setup:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Install packages required for pipeline tasks (ex: &lt;code&gt;podman&lt;/code&gt; and &lt;code&gt;buildah&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;sudo&lt;/code&gt; is required, manage the &lt;code&gt;gitlab-runner&lt;/code&gt; user/group using &lt;code&gt;visudo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If using docker runners, &lt;code&gt;docker-machine&lt;/code&gt; needs to be installed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-runner&#34;&gt;Install runner&lt;/h2&gt;

&lt;p&gt;First, install the &lt;code&gt;gitlab-runner&lt;/code&gt; package. This can be done using the
instructions found
&lt;a href=&#34;https://docs.gitlab.com/runner/install/linux-repository.html&#34;&gt;here&lt;/a&gt;.
&lt;em&gt;However&lt;/em&gt;, I encountered issues installing it on my Fedora VMs, as this install
method isn&amp;rsquo;t supported for 30 yet.  (Check out &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-runner/issues/4401&#34;&gt;this
issue&lt;/a&gt; for more info).&lt;/p&gt;

&lt;h4 id=&#34;add-gitlab-s-repo&#34;&gt;Add GitLab&amp;rsquo;s Repo&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;install-gitlab-runner&#34;&gt;Install gitlab runner&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install gitlab-runner&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;alternative-copr-install&#34;&gt;(Alternative) Copr install&lt;/h2&gt;

&lt;p&gt;For now, I have been using the copr install posted in the comments
of that issue (linked above). I recommend checking if the issue is resolved first, as it
might change from the time of writing this post. To install:&lt;/p&gt;

&lt;p&gt;First enable the copr repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf copr enable snecker/gitlab-runner -y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install gitlab-runner -y&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;register-the-runner&#34;&gt;Register the Runner&lt;/h4&gt;

&lt;p&gt;Once installed, register the runner. Instructions on how to register a runner
can be found &lt;a href=&#34;https://docs.gitlab.com/runner/register/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo gitlab-runner register&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enter the coordinator URL (ex: &lt;code&gt;https://gitlab.com&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Next, a &lt;em&gt;gitlab-ci&lt;/em&gt; token must be shared with the runner.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/create-gitlab-runner/gitlab-runner-settings.png&#34;&gt;
&lt;img alt=&#34;Gitlab Runner Settings&#34; src=&#34;../../img/posts/create-gitlab-runner/gitlab-runner-settings.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Gitlab Runner&lt;strong&gt;s&lt;/strong&gt; Settings Page&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;To obtain a gitlab-ci token, got to &lt;strong&gt;Admin Area&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Overview&lt;/strong&gt; -&amp;gt;
&lt;strong&gt;Runners&lt;/strong&gt;. On the right, there should be a token to use during setup.&lt;/p&gt;

&lt;p&gt;When the runner registrations asks for the token, use the &amp;ldquo;registration token&amp;rdquo;
listed in the &amp;ldquo;Set up a shared Runner manually&amp;rdquo; section.&lt;/p&gt;

&lt;p&gt;Next, provide a short description, and add a tag or two (when prompted).&lt;/p&gt;

&lt;p&gt;Lastly, enter the executor (the system on the runner that executes commands). For
now, I&amp;rsquo;ve been using &lt;code&gt;&amp;quot;shell&amp;quot;&lt;/code&gt; for my needs, as these VMs are fully
dedicated to be used as the runners for a single project.&lt;/p&gt;

&lt;p&gt;Congrats, the runner should be registered! Now to set it up&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;link-to-ci-cd-builds&#34;&gt;Link to CI/CD Builds&lt;/h2&gt;

&lt;p&gt;It is time to link up the runner to a CI/CD job. This can be done with
tagging, but I currently just have one pipeline using my runners, so haven&amp;rsquo;t
used the tags as much. Edit the runner by clicking its  &lt;code&gt;edit&lt;/code&gt; icon.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/create-gitlab-runner/runner-edit.png&#34;&gt;
&lt;img alt=&#34;Gitlab Runner Settings&#34; src=&#34;../../img/posts/create-gitlab-runner/runner-edit.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Gitlab Runner Edit Page&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;In the runner edit menu, ensure that the &amp;ldquo;&lt;code&gt;Active&lt;/code&gt;&amp;rdquo; checkbox is checked. I&amp;rsquo;ve
also checked the &amp;ldquo;&lt;code&gt;Run untagged jobs&lt;/code&gt;&amp;rdquo; box for this runner, which will allow it
to pick up any job that does &lt;em&gt;not&lt;/em&gt; have a tag. If the runner is to be assigned
to a &lt;em&gt;specific&lt;/em&gt; project, that can be enabled/assigned below in the &amp;ldquo;&lt;code&gt;Restrict
projects for this Runner&lt;/code&gt;&amp;rdquo; section.&lt;/p&gt;

&lt;h2 id=&#34;test-run&#34;&gt;Test Run&lt;/h2&gt;

&lt;p&gt;To test out the runner, start a new build in a project! (Note, if there are
several runners already setup, 1. why are you reading this, and 2. it might be a good idea
to pause the others to ensure the new one will run with the test).&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t detail how to write a &lt;code&gt;gitlab-ci.yml&lt;/code&gt; now, but for my test I made an empty
demo repo with the following pipeline:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;before_script:
  - whoami
  - pwd
  - sudo dnf update -y

build-base:
  stage: build
  script:
    - echo &amp;#34;Hello world!&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After committing it, a build kicked off with the new runner and finished
successfully!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Notice that the job indeed ran on &lt;code&gt;post-runner&lt;/code&gt;, the runner I setup
specifically for this post&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/create-gitlab-runner/pipeline-run.png&#34;&gt;
&lt;img alt=&#34;Gitlab Runner Settings&#34; src=&#34;../../img/posts/create-gitlab-runner/pipeline-run.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Gitlab Demo Job Run Results&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If the job is more complicated, more runs might have to be manually started
after tweaking the runner settings again. Pipelines can be started by going to
the project&amp;rsquo;s &lt;code&gt;CI/CD-&amp;gt;Pipelines&lt;/code&gt; page via the side menu, and hitting the &lt;code&gt;Run
Pipeline&lt;/code&gt; button.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it. We should now have a connected runner! So far, the runners have been working
&lt;em&gt;(mostly)&lt;/em&gt; fine. When they &lt;em&gt;do&lt;/em&gt; break, it is usually because I&amp;rsquo;ve let the disk
fill up or allowed some other system-related negligence to build up
&lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;. I might add some &amp;lsquo;runner maintenance&amp;rsquo; steps to my pipeline&amp;hellip; but
some other time. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Back to Solus</title>
      <link>http://ryan.himmelwright.net/post/back-to-solus/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/back-to-solus/</guid>
      <description>&lt;p&gt;Well, that was faster than I expected. This past weekend, I wiped the Fedora installation on my main computer, and replaced it with Solus. My Fedora install broke, and I needed to use a Fedora Live CD to fix it. I thought that if I had to use a live CD to fix the issue, I might as well just do a clean install. With the idea of a clean install in my head&amp;hellip; I thought (possibly influenced by my recent &lt;a href=&#34;../../post/dabbling-with-go/#motivation&#34;&gt;motivation&lt;/a&gt; to play with Go), that I might as well do the clean install with &lt;a href=&#34;https://getsol.us/&#34;&gt;Solus&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;nvidia-issues&#34;&gt;Nvidia Issues&lt;/h2&gt;

&lt;div class=&#34;video-container&#34;&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/IVpOyKCNZYw?start=101&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Linus Torvalds famously flipped off Nvidia during a Q&amp;amp;A&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basically, what I think happened was that my Nvidia drivers got messed up during an update. When I rebooted my computer, my screens were black. This happened no matter which kernel I booted into from Grub. I assumed it was a graphics problem and preceded to switch to another tty to login and fix the problem. I was able to get to a CLI login screen (with the normal &lt;code&gt;user:&lt;/code&gt; prompt) and tried login in. However, after typing in my user name and hitting enter, instead of being promoted for a password, I received an &amp;ldquo;Error Logging In&amp;rdquo; message. So, I tried the same thing with the root user account. Same thing. After typing in a user name, it yelled at me. There was no way to log in.&lt;/p&gt;

&lt;p&gt;I jumped into the IRC chat and started asking around for advice. As always, everyone was very helpful and tried to help me troubleshoot. They shared my bewilderment. We came to the conclusion that it must of been something with the Nvidia drivers. I was told that it is common to have issues when installing the drivers from Nvidia&amp;rsquo;s web site instead of the &lt;a href=&#34;https://rpmfusion.org/&#34;&gt;RPM Fusion Repos&lt;/a&gt; (I intended to install from the RPM fusion repos, but I went to the nvidia site to find out what version to should use&amp;hellip; and then just downloaded it from there. My bad :P).&lt;/p&gt;

&lt;p&gt;Anyway, I quickly realized that at the very least, I would have to boot up and log into a Live CD to fix the problem. As stated in the intro paragraph, while waiting for the ISO image to download I thought that if I have to load up the CD, I might as well just do a clean Fedora 26 install. A couple minutes later as I was booting up the Live CD, I through that as long as I was reinstalling my OS&amp;hellip; l should consider installing&amp;hellip; Solus.&lt;/p&gt;

&lt;h2 id=&#34;installed-solus&#34;&gt;Installed Solus&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;Installing Solus&#34; src=&#34;../../img/posts/back-to-solus/install.png&#34; style=&#34;max-width: 100%;&#34;/&gt;
&lt;em&gt;Installing Solus&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With the Fedora live environment all booted and ready, I started downloading the latest Solus ISO (Budgie) on my other laptop. Once the ISO image was mounted to a drive, I booted it up and started installing Solus. After the install, I immediately updated because I knew there have been a TON of updates since the last ISO snapshot (mid-April). When I rebooted, I absolutely loved what I saw. It is amazing how much Solus and Budgie have improved, even during my short distro-hopping vacation.&lt;/p&gt;

&lt;p&gt;Looking at my post history, it may appear as though I used Fedora for a few days, became fed up with it, and came running back to Solus. That is not entirely true. The reality is that I sat on writing my &lt;a href=&#34;../../post/solus-to-fedora/&#34;&gt;Fedora post&lt;/a&gt; for a long time. I used Fedora for about a month, and it was generally a great experience. If it didn&amp;rsquo;t break, I probably would have stayed for a bit longer. When considering a new install though, I realized that I had missed Solus.&lt;/p&gt;

&lt;p&gt;As of now, my plan is to keep using Solus, at least on my main computer. I am also hoping to get more involved with the project, and start packing up some software again. Maybe I can even help with some debugging and development. We shall see&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrating from Solus to Fedora for now</title>
      <link>http://ryan.himmelwright.net/post/solus-to-fedora/</link>
      <pubDate>Tue, 25 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/solus-to-fedora/</guid>
      <description>&lt;p&gt;For awhile, I have been debating the idea of switching back to Fedora (from Solus). At least on my &lt;a href=&#34;../../pages/homelab/#alakazam&#34;&gt;main computer&lt;/a&gt;. First, let me state this right up front: I am still &lt;em&gt;very&lt;/em&gt; satisfied with Solus. I think it is one of the best current Linux distros, and I want to still contribute to the project. However, there are a few reasons why Solus isn&amp;rsquo;t the best fit for my needs &lt;em&gt;right now&lt;/em&gt;, and I will highlight them below.&lt;/p&gt;

&lt;h3 id=&#34;why-switch&#34;&gt;Why Switch&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;img alt=&#34;Solus and Fedora Logos&#34; src=&#34;../../img/posts/solus-to-fedora/logos.png&#34;  style=&#34;max-width: 85%;&#34;/&gt;
&lt;/center&gt;
&lt;em&gt;The Solus (Left) and Fedora (right) Project Logos&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The first phrase stated on the &lt;a href=&#34;https://getsol.us&#34;&gt;Solus Project homepage&lt;/a&gt; is &amp;ldquo;Solus is an operating system that is designed for &lt;strong&gt;home computing&lt;/strong&gt;.&amp;rdquo; I find this to be true, and Solus does a great job at it. The Linux community needs a few good, focused, distros. While I have been using Solus for my &amp;ldquo;&lt;em&gt;home&lt;/em&gt;&amp;rdquo; computing, the computing tasks I&amp;rsquo;ve focused on recently do not fall into the category of standard &lt;em&gt;home computing&lt;/em&gt; use. Recently, my main top computing activities and goals are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing (okay&amp;hellip; but still)&lt;/li&gt;
&lt;li&gt;Running all sorts of VMs&lt;/li&gt;
&lt;li&gt;Trying various Server Technologies

&lt;ul&gt;
&lt;li&gt;ZFS&lt;/li&gt;
&lt;li&gt;KVM&lt;/li&gt;
&lt;li&gt;Containerization Technologies (LXC, Docker, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;Ansible and other automation tools&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Learning about Clustering

&lt;ul&gt;
&lt;li&gt;OpenMP&lt;/li&gt;
&lt;li&gt;High Availability&lt;/li&gt;
&lt;li&gt;Distributed File systems&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Trying to get involved with some other Open Source Projects

&lt;ul&gt;
&lt;li&gt;Fedora (Infrastructure, Dev)&lt;/li&gt;
&lt;li&gt;NixOS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, many of the above items are not desktop based, but really
&lt;em&gt;server&lt;/em&gt; based operations. Solus is &lt;em&gt;not&lt;/em&gt; a server distribution, as it doesn&amp;rsquo;t
&lt;em&gt;try&lt;/em&gt; to be one. Which is a good thing. It is focused on its audience. I
just happen to not be in that audience at the moment.&lt;/p&gt;

&lt;p&gt;Additionally, one of my goals for the near future is to transform my long-time Proxmox server into a &lt;a href=&#34;https://www.centos.org/&#34;&gt;CentOS&lt;/a&gt; box. Using Fedora on my main workstation does help me get accustom to that environment. It also allows me to more accurately test out ideas before I plan the big move.&lt;/p&gt;

&lt;p&gt;Lastly, I had been eyeing up the Plasma desktop, and wanted to try that out again. At the time of writing this post, Solus doesn&amp;rsquo;t fully support the Plasma desktop (yet). However, Fedora &lt;em&gt;does&lt;/em&gt; have a &lt;a href=&#34;https://spins.fedoraproject.org/kde/&#34;&gt;KDE Plasma Desktop Spin&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-switch&#34;&gt;The Switch&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;img alt=&#34;Solus and Fedora Logos&#34; src=&#34;../../img/posts/solus-to-fedora/fedora25.png&#34;  style=&#34;max-width: 100%;&#34;/&gt;
&lt;/center&gt;
&lt;em&gt;Screenfetch on my new Fedora Install&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I eventually (and somewhat sporadically), made the switch to Fedora. I switched
the week before the 26 release, so I decided to start with 25, and then upgrade
later (although I did test out 26 on my other laptop). This let me ensure that
the 26 issues were ironed out before upgrading. I also got to test out the &lt;code&gt;dnf&lt;/code&gt;
system upgrade process. I recorded &lt;em&gt;post-switch&lt;/em&gt; notes during the last few weeks
to document how everything went.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Well&amp;hellip; I did it. I switched to Fedora on Alakazam yesterday. I went with the
Fedora 25 KDE spin and did all of the hoops to get that up and going. Not only
is it taking some time to get used to Fedora again, but I am needing to
reacquaint myself with the KDE environment&amp;hellip; it does seem different that other
Plasma setups I&amp;rsquo;ve used in the past&amp;hellip; But I like it.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got used to it in no time:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Alakazam is doing well on Fedora. I&amp;rsquo;ve been enjoying it and think I will stay on
it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;updates&#34;&gt;Updates&lt;/h3&gt;

&lt;p&gt;I ran some updates that I thought &lt;em&gt;might&lt;/em&gt; be problematic, based
on &lt;a href=&#34;../../post/back-on-arch/#fedora&#34;&gt;previous issues&lt;/a&gt; I&amp;rsquo;ve encountered with Fedora. I
made sure to note the results as well. The first notable update was from the
first time I updated the kernel, and the second was  upgrading from
Fedora 25 to 26. Both updates went very smoothly without any issues:&lt;/p&gt;

&lt;h4 id=&#34;kernel-upgrade&#34;&gt;Kernel Upgrade&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;So I am about to do my first Kernel update since being on Fedora again (on
Alakazam). We&amp;rsquo;ll see how the video drivers respond&amp;hellip; To note, I am still on 25
so it hopefully won&amp;rsquo;t be too bad&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&amp;hellip;reboot&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No issues whatsoever :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;upgrade-to-fedora-26&#34;&gt;Upgrade to Fedora 26&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/solus-to-fedora/fedora26-upgrade.png&#34;&gt;&lt;img alt=&#34;Solus and Fedora Logos&#34; src=&#34;../../img/posts/solus-to-fedora/fedora26-upgrade.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;/center&gt;
&lt;em&gt;I upgraded my Fedora 25 Plasma Install to Fedora 26&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Other than some odd issues with the GUI tool, the upgrade from 25 to 26 was
smooth and uneventful.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I just upgraded Alakazam from Fedora 25 KDE, to Fedora 26 this morning. I couldn&amp;rsquo;t really get the
graphical installer to start, but that could be because I have several desktop environments setup
(Plasma &amp;amp; Gnome), so it may have been confused (I was using the Gnome Software App in Plasma&amp;hellip;)&lt;/p&gt;

&lt;p&gt;I just did the upgrade using the (command line) dnf upgrade tool, like I normally use, and it worked
wonderfully. It even looks like my nvidia drivers stayed and my monitors were configured correctly
after rebooting. The only difference is I don&amp;rsquo;t seem to have the same Plasma animations I had
before, but that is fine, and likely part of the update.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So that it. Those are my reasons for switching (for now), and the results of my
switch. I am still happy with Fedora, at least on Alakazam, and will likely
remain on it until I have a convincing reason to leave.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
