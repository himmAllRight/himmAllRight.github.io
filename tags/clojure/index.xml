<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on λ ryan. himmelwright. net</title>
    <link>http://ryan.himmelwright.net/tags/clojure/</link>
    <description>Recent content in Clojure on λ ryan. himmelwright. net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Apr 2016 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://ryan.himmelwright.net/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Cryogen for Website</title>
      <link>http://ryan.himmelwright.net/post/website-switched-to-cryogen/</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/website-switched-to-cryogen/</guid>
      <description>&lt;p&gt;Ever since resurrecting my personal website, I have experimented with several
static website generators. Thus far, I have tried
&lt;a href=&#34;https://github.com/kelvinh/org-page&#34;&gt;org-page&lt;/a&gt;,
&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; (&lt;em&gt;several&lt;/em&gt; times), and even (almost) made
&lt;a href=&#34;https://github.com/himmAllRight/ryBlog/blob/master/org-blog.el&#34;&gt;my own emacs org-page solution&lt;/a&gt;. Now that I have
started using the &lt;a href=&#34;http://clojure.org/&#34;&gt;clojure&lt;/a&gt; programming language, I have come across
&lt;a href=&#34;http://cryogenweb.org/&#34;&gt;cryogen&lt;/a&gt;. As you may have already guessed, this site is now
being generated using cryogen.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;emacs-org-mode-solutions&#34;&gt;Emacs/org-mode Solutions&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;emacs logo&#34; src=&#34;../../img/posts/using-cryogen-for-website/Emacs-icon.png&#34; style=&#34;max-width: 40%;&#34;/&gt;
&lt;img alt=&#34;org-mode unicorn&#34; src=&#34;../../img/posts/using-cryogen-for-website/org-mode-unicorn.png&#34; style=&#34;max-width: 40%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;About a year ago, obsession with
&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;emacs&lt;/a&gt; (and more importantly,
org-mode) eventually led me to try out
&lt;a href=&#34;https://github.com/kelvinh/org-page&#34;&gt;org-page&lt;/a&gt; while revitalizing my
personal website. The idea of writing webpage content in .org files
was &lt;em&gt;very&lt;/em&gt; appealing and I wanted to gain a more experience
writing emacs lisp, so it seemed like a good choice. Overall,
org-page was a good learning experience, but I found the documentation
and support to be lacking. It seemed to be more of a
&lt;a href=&#34;http://kelvinh.github.io/&#34;&gt;personal project&lt;/a&gt;, rather than a fully supported
framework. while I know &lt;a href=&#34;http://cmacr.ae/&#34;&gt;other people&lt;/a&gt; were able to
get it working, org-page simply wasn&amp;rsquo;t working for me.&lt;/p&gt;

&lt;p&gt;For over a year now, I have used org-mode at work each week to track
my hours and to take notes (including code snippets). I then export
the org files to html, creating a full index of my work
notes/logs. After digging deeper into org-page, realized it was just a
fancy wrapper around the org-project functions I used at work. So, I
decided to implment &lt;a href=&#34;https://github.com/himmAllRight/ryBlog/blob/master/org-blog.el&#34;&gt;my own emacs org-page solution&lt;/a&gt;
(well, &lt;em&gt;half&lt;/em&gt; implement&amp;hellip; I guess I never fully finished
it). Creating my own solution helped me learn even more about org-mode
(which helped with my work notes), but I ultimately abandoned using this method
for my personal website. Managing my own solution quickly became a pain
because I had to setup emacs, install the dependencies, and get a &lt;em&gt;.emacs&lt;/em&gt; file working &lt;em&gt;just right&lt;/em&gt; on any compuer I wanted to generate the site from.&lt;/p&gt;

&lt;h2 id=&#34;jekyll&#34;&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;img alt= &#34;jekyll logo&#34; src=&#34;../../img/posts/using-cryogen-for-website/jekyll.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;My first experience with &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; was about two
years ago, right after I graduated college. It was the first true
static website generator that I tried and I absolutely loved the
concept. You see, I taught myself how to build websites in the early
to mid 2000&amp;rsquo;s when I was in middle school, and apparently never
developed beyond that point. During college, I maintained a personal
site by hand. It was super simplistic html that used tables for the
layout, and css for coloring. That&amp;rsquo;s about it. Using a static website
generator like Jekyll for the first time was amazing, since it
automatically produced static webpages that looked &lt;em&gt;much&lt;/em&gt; better than
anything I could do by hand. All I had to worry about was the
content. It was what 12-year-old-me longed for (and tried to do
using iframes and other messiness). I eventually stopped using Jekyll
because I was unable to get the theming quite right, and &amp;hellip; well
&amp;hellip; I started &lt;em&gt;really&lt;/em&gt; getting into emacs. But you&amp;rsquo;ve already heard
that story.&lt;/p&gt;

&lt;p&gt;After taking a breif hiatus from Jekyll to adventure deeper into emacs
land, I returned. This time, I was able to find and configure a
&lt;a href=&#34;https://github.com/joshgerdes/jekyll-uno&#34;&gt;enticing theme&lt;/a&gt; that fit my
needs. My personal website probably looked the best is ever has, and I
really enjoyed it. However, I have recently become frusterated using
Jekyll (again). It is a great static website generator, but because I
don&amp;rsquo;t often develop in Ruby (right now), setting up the proper ruby
gems environment and dependencies on
&lt;a href=&#34;../../pages/homelab/&#34;&gt;my computers&lt;/a&gt; makes me want to bang my head against
the wall. Additionally, I have been learning
&lt;a href=&#34;http://clojure.org/&#34;&gt;clojure&lt;/a&gt; and while digging through different
clojure projects, I found &lt;a href=&#34;http://cryogenweb.org/&#34;&gt;cryogen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cryogen&#34;&gt;Cryogen&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;Cryogen logo&#34; src=&#34;../../img/posts/using-cryogen-for-website/cryogen.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cryogenweb.org/&#34;&gt;Cryogen&lt;/a&gt; is a static website generator
written in &lt;a href=&#34;https://clojure.org/&#34;&gt;Clojure&lt;/a&gt;.  If you already have
&lt;a href=&#34;http://leiningen.org/&#34;&gt;Leiningen&lt;/a&gt; installed (which if using Clojure,
you should), starting a new Cryogen application is as easy as entering
&lt;code&gt;lein new cryogen project-name&lt;/code&gt; into a terminal. Once the project is
created, you can &lt;code&gt;cd&lt;/code&gt; into the directory and run &lt;code&gt;lein ring server&lt;/code&gt;.
Clojure will then fire up a local webserver of the compiled project
(by default on port 3000). Whenever a change to a project file is
saved, the cryogen server re-compiles the project and updates the
webserver. As a result, it easy to edit and see the changes
live. Cryogen has a rather large, but simple
&lt;a href=&#34;http://cryogenweb.org/docs/structure.html&#34;&gt;directory structure&lt;/a&gt; that is used to
organize the project. This structure is slightly different from
Jekyll, and takes a bit of getting to, but I think it does a better
job at keeping everything organized once you learn it.&lt;/p&gt;

&lt;p&gt;The one thing I &lt;em&gt;really&lt;/em&gt; like about Cryogen is the fact
that&amp;hellip; well&amp;hellip; it&amp;rsquo;s clojure. This means that things can often feel more
&amp;ldquo;lisp-y&amp;rdquo;. For example, in Jekyll, the preferences
and configuration of the website are kept inside a yaml configuration
file. Similarly, the meta-data and information for a page or blog post
are defined in a very specific yaml header at the top of the markdown
files. Cryogen follows a similar concept, but instead of yaml
headers, it simply uses a p-list for the
&lt;a href=&#34;http://cryogenweb.org/docs/configuration.html&#34;&gt;configuration setup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To change a post&amp;rsquo;s information (ex: title, author, date), one just has
to change the keywords in the list at the top of the post&amp;rsquo;s markdown
file. This flexability means that figuring out how to setup use my own
configuration was a breeze. For programmers that have previously used
Clojure or another LISP, the configuration in Cryogen is very
intuitive and natural.&lt;/p&gt;

&lt;p&gt;The only &lt;em&gt;downside&lt;/em&gt; (sort of&amp;hellip; it&amp;rsquo;s my fault) I have experienced
while using Cryogen is that being a smaller community, there isn&amp;rsquo;t
much out there in terms of templetes and themes (at least that I was
able to find during a lazy search). So, while I was able to easily
setup an amazing looking website using Jekyll (by using someone else&amp;rsquo;s
hard work), I am forced to be a bit more hands-on using
cryogen. Initially, I thought this was a negative, but after spending
some time hacking away at the default theme and cleaning some rust off
css/html skills, I think I have the site looking &lt;em&gt;good enough&lt;/em&gt; for
now. As a bonus, I am starting to re-learn web design. However, I am
&lt;em&gt;slowly&lt;/em&gt; catching up, so &amp;ldquo;modern&amp;rdquo; design features like mobil support
might not happen right away. It&amp;rsquo;s not the best looking site, but I
has personal touch, which I guess is good in a personal website.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s about it. That&amp;rsquo;s why my site suddenly looked different one
weekend. If I look forward to using both Clojure and Cryogen more for not
only this website, but other personal projects as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* PS: Re-reading this post I realize trying Cryogen after getting excited about Clojure is VERY much like when I started using org-page after getting excited about emacs. Hopefully this setup is a keeper that I stick with. ;)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
