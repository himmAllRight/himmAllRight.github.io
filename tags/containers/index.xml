<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>containers on λ ryan. himmelwright. net</title>
    <link>http://ryan.himmelwright.net/tags/containers/</link>
    <description>Recent content in containers on λ ryan. himmelwright. net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jan 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://ryan.himmelwright.net/tags/containers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automatically Create and Run a Podman Container Using Systemd</title>
      <link>http://ryan.himmelwright.net/post/auto-podman-run-systemd/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/auto-podman-run-systemd/</guid>
      <description>&lt;p&gt;No, this is not the &lt;em&gt;same&lt;/em&gt; as &lt;a href=&#34;../../post/create-podman-systemd-services/&#34;&gt;my last
post&lt;/a&gt;, but is a continuation of it.
While the basic &lt;code&gt;podman generate systemd&lt;/code&gt; generated file works for many
cases&amp;hellip; it wasn&amp;rsquo;t a good long-term solution for my jellyfin container. So, I
made a small tweak.&lt;/p&gt;

&lt;h2 id=&#34;the-issue&#34;&gt;The Issue&lt;/h2&gt;

&lt;p&gt;My issue was that the container initially worked, but would occasionally
break when it grew old. By itself, it isn&amp;rsquo;t a problem. Containers are
designed to be ephemeral, and arguably &lt;em&gt;should&lt;/em&gt; be blown away before being
instantiated again. The difficulty is that creating a new container
results in having to edit the container uuids in the service file, otherwise
the service breaks&amp;hellip; which seems to sometimes then break the &lt;em&gt;new&lt;/em&gt; container.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/auto-podman-run-systemd/jellyfin-failed-webpage.png&#34;&gt;&lt;img alt=&#34;Failed Jellyfin Webpage&#34; src=&#34;../../img/posts/auto-podman-run-systemd/jellyfin-failed-webpage.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This requires me to then &lt;em&gt;disable&lt;/em&gt; the service, blow-away and make the new
container, update the service file, and &lt;em&gt;finally&lt;/em&gt; start the service&amp;hellip; again.&lt;/p&gt;

&lt;h2 id=&#34;a-different-approach&#34;&gt;A Different Approach&lt;/h2&gt;

&lt;p&gt;I started to think about how I could better the process. I knew that a
&lt;em&gt;newly&lt;/em&gt; created container seemed to work each time, as I previously used the
&lt;code&gt;--rm&lt;/code&gt; flag when starting it manually. From there, I wondered if I could
write &lt;em&gt;my own&lt;/em&gt; systemd service file using the &lt;code&gt;podman run&lt;/code&gt; command instead.
This would both create and kick off a &lt;em&gt;new&lt;/em&gt; container after boot, instead of
re-starting a persistent one.&lt;/p&gt;

&lt;h2 id=&#34;testing-it-out&#34;&gt;Testing it out&lt;/h2&gt;

&lt;p&gt;To test out my plan, I decided to edit the file created by the &lt;code&gt;podman
generate system&lt;/code&gt; command in the last post and go from there. I opened
the service file (&lt;code&gt;~/.config/systemd/user/jellyfin.service&lt;/code&gt;) in my editor and
changed the following line under the &lt;code&gt;[Service]&lt;/code&gt; section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/podman start 2ba0f86b0fc53cb2fe43abb20215680982800c1bf53421e1a3a90855fa79f030&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I swapped &lt;code&gt;ExecStart&lt;/code&gt; to use my manual &lt;code&gt;podman run&lt;/code&gt; command, with a &lt;code&gt;--rm&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/podman run --name jellyfin --rm -d -v /home/ryan/Network/jellyfin/config:/config -v /home/ryan/Network/jellyfin/cache:/cache -v /home/ryan/Music:/media/music:ro -v /home/ryan/Videos:/media/videos:ro --net=host --privileged jellyfin/jellyfin:latest&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also edited the &lt;code&gt;ExecStop&lt;/code&gt; and &lt;code&gt;ExecStopPost&lt;/code&gt; values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/podman stop -t 10 2ba0f86b0fc53cb2fe43abb20215680982800c1bf53421e1a3a90855fa79f030&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStopPost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/podman stop -t 10 2ba0f86b0fc53cb2fe43abb20215680982800c1bf53421e1a3a90855fa79f030&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I switched them to use the container name (&lt;code&gt;jellyfin&lt;/code&gt;) instead of uuids:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/podman stop -t 10 jellyfin&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStopPost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/podman stop -t jellyfin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After saving the changes, I removed my old jellyfin container, reloaded the
unit files (using &lt;code&gt;systemctl --user daemon-reload&lt;/code&gt;, as described in the
previous post), and restarted the machine to determine what elements would
need tweaking when writing &lt;em&gt;my&lt;/em&gt; service file.&lt;/p&gt;

&lt;h2 id=&#34;another-shortened-post&#34;&gt;Another Shortened Post&amp;hellip;&lt;/h2&gt;

&lt;p&gt;However, I never made my own service file, or even edited the generated one
again. It appeared to work fine after making those few tweaks. For the
second time in a row, I have a much simpler post than originally intended
due to the tooling around &lt;code&gt;podman&lt;/code&gt;. I&amp;rsquo;m okay with that.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While the solution still isn&amp;rsquo;t 100% &lt;em&gt;perfect&lt;/em&gt; (containers sometimes don&amp;rsquo;t
destroy themselves, and I still have to login for the service to autostart)
it has overall been working great for me. I no longer have to worry about
uuids. When I encounter an issue, I stop the container, it kills
itself, and then the service starts up a fresh one. Much better.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create Podman Systemd Services</title>
      <link>http://ryan.himmelwright.net/post/create-podman-systemd-services/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/create-podman-systemd-services/</guid>
      <description>&lt;p&gt;On my Linux workstation, I have started to host a
&lt;a href=&#34;https://jellyfin.org/&#34;&gt;jellyfin&lt;/a&gt; server using podman. I have also started to
shutdown my computer when I go to bed, as all of our important services (ex:
home automation) are hosted on my home server. With that said, there is one
remaining problem with this configuration. When I boot up my computer the
next morning, my containers do not automatically start&amp;hellip; and I &lt;em&gt;always&lt;/em&gt;
forget to start them up myself. Let&amp;rsquo;s fix that, using systemd.&lt;/p&gt;

&lt;h2 id=&#34;create-the-container&#34;&gt;Create the container&lt;/h2&gt;

&lt;p&gt;In order to define a systemd service for a container, the container needs to
already be created and running. The &lt;code&gt;podman run&lt;/code&gt; command is used to start
a new container. For example, to run my jellyfin server, I used the
following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;podman run --name jellyfin -d -v /home/ryan/Network/jellyfin/config:/config -v /home/ryan/Network/jellyfin/cache:/cache -v /home/ryan/Music:/media/music:ro -v /home/ryan/Videos:/media/videos:ro --net&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;host --privileged jellyfin/jellyfin:latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It should be noted, that because we will want the container to persist, even
if it is stopped, the &lt;code&gt;--rm&lt;/code&gt; flag should &lt;em&gt;not&lt;/em&gt; be used here. I normally add
this flag to keeps things clean, but had to remove it for the service file.&lt;/p&gt;

&lt;h2 id=&#34;root-vs-user-containers&#34;&gt;Root vs User containers?&lt;/h2&gt;

&lt;p&gt;Before getting started, I just want to mention user vs. root containers. In my
first attempt to start podman containers with systemd, I hit some errors
and then I realized&amp;hellip; &lt;em&gt;systemd&lt;/em&gt; was running as &lt;em&gt;root&lt;/em&gt; but the container ran
under my username. For example, running &lt;code&gt;sudo podman ps -a&lt;/code&gt; didn&amp;rsquo;t list my
container, but &lt;code&gt;podman ps -a&lt;/code&gt; did.&lt;/p&gt;

&lt;p&gt;Once solution could be to switch over and run the container as root using
sudo, but that didn&amp;rsquo;t feel right. A benefit of podman is that it is able to
run rootless, and to not take advantage of that feature would be a shame. So,
I started running the systemd steps as the user, but providing the &lt;code&gt;--user&lt;/code&gt;
flag and it resolved my issues.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-service-file&#34;&gt;Creating the Service File&lt;/h2&gt;

&lt;p&gt;At first, I started creating the systemd service files manually, just as I
have done &lt;a href=&#34;../../post/autostarting-application-systemd-service/&#34;&gt;in previous
posts&lt;/a&gt;. Although, after
reading an example in &lt;a href=&#34;https://www.redhat.com/sysadmin/podman-shareable-systemd-services&#34;&gt;this
article&lt;/a&gt;,
I was reminded that there&amp;rsquo;s actually a &lt;code&gt;podman generate systemd&lt;/code&gt; command.
This command will assemble and output a unit file for a container. I ran
it, and saved the generated service file to my user local systemd location.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;podman generate systemd jellyfin &amp;gt; ~/.config/systemd/user/jellyfin.service&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simple! This file could be altered if needed, but after quickly skimming it I
thought it looked good.&lt;/p&gt;

&lt;h2 id=&#34;starting-enabling-the-service&#34;&gt;Starting &amp;amp; Enabling the Service&lt;/h2&gt;

&lt;p&gt;Before starting the service, it is a good idea to have systemd reload the
user unit files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl --user daemon-reload&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards, I started the service, and checked the status to confirm that the
service started up without issue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl --user start jellyfin.service
systemctl --user status jellyfin.service&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, I &lt;code&gt;enabled&lt;/code&gt; the service, again with the &lt;code&gt;--user&lt;/code&gt; flag so that it
would automatically start on boot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl --user enable jellyfin.service&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;testing-it-out&#34;&gt;Testing it out&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/create-podman-systemd-services/jellyfin_container.png&#34;&gt;&lt;img alt=&#34;Auto started Jellyfin serving running in a podman container&#34; src=&#34;../../img/posts/create-podman-systemd-services/jellyfin_container.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Jellyfin service running in a podman container auto-started at boot&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;With the service setup and enabled, I rebooted my computer to test it out.
After booting up, I used &lt;code&gt;podman ps&lt;/code&gt; to prove that the container was started:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;podman ps -a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the container &lt;em&gt;running&lt;/em&gt;&amp;hellip; I next opened up my web browser to verify that
jellyfin was actually &lt;em&gt;working&lt;/em&gt;&amp;hellip; and it was!&lt;/p&gt;

&lt;h2 id=&#34;caveats&#34;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;While this solution works for the most part, I did hit two small annoyances:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Running as a user service, the service won&amp;rsquo;t start until the
user has logged in. This makes sense, and can be resolved by quickly ssh&amp;rsquo;ing
into the machine. However, it should be known and worked around if using
something like WOL startup, as sending the magic packet won&amp;rsquo;t be enough to
get the service containers up and running.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If something breaks with the container and it has to be reset, the service
file should also be regenerated and replaced. The file references container
&lt;code&gt;uuid&lt;/code&gt;s, and if that changes, the file needs to reflect that. It&amp;rsquo;s not a big
problem. Containers break and that&amp;rsquo;s okay (remember, they&amp;rsquo;re designed to be
ephemeral). Just remember to remove and regenerate the service file when it
happens.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When I set out to write this post, I though there would be a bit more to it,
requiring me to create the service file manually. However, I quickly stumbled
on the &lt;code&gt;podman generate systemd&lt;/code&gt; command and I am glad I did. It is one more
feature to add to the ever-growing list of reasons while I love podman and
the other &lt;a href=&#34;https://docs.fedoraproject.org/en-US/fedora-silverblue/_attachments/container-commandos.pdf&#34;&gt;container
commandos&lt;/a&gt;.
Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automated Nativefier App builds</title>
      <link>http://ryan.himmelwright.net/post/automated-nativefier-app-builds/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/automated-nativefier-app-builds/</guid>
      <description>&lt;p&gt;Most applications we use today are fancy web pages, wrapped up in a desktop
shell. Many people even forgo desktop builds, instead opting to run webapps
simply as another tab in their web browser (Ex: Slack,
Discord, Notion). Personally, I prefer to have dedicated windows opened for my
essential tools. As a result, I love using
&lt;a href=&#34;https://github.com/jiahaog/nativefier&#34;&gt;nativefier&lt;/a&gt; to create desktop versions
of my favorite web-based applicatons. The only problem is&amp;hellip; it can be a pain to
setup. Lets fix that.&lt;/p&gt;

&lt;h2 id=&#34;how-i-use-nativefier&#34;&gt;How I use nativefier&lt;/h2&gt;

&lt;h3 id=&#34;what-apps-i-use-it-for&#34;&gt;What Apps I use it for&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/automated-nativefier-app-builds/pocketcasts.png&#34;&gt;&lt;img alt=&#34;Using Pocketcasts as a nativefier build&#34; src=&#34;../../img/posts/automated-nativefier-app-builds/pocketcasts.png&#34; style=&#34;max-width:
100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Using the Pocketcasts web app in a desktop window via
nativefier&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;I use nativefier for all of the web services that are missing a Linux client,
or web tools that I use often and want a dedicated desktop client for. On most days,
I use the following tools via a nativefier desktop build:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pocket&lt;/strong&gt; - to read articles&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pocketcasts&lt;/strong&gt; - to listend to synced podcasts between my phone and computer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fastmail&lt;/strong&gt; - For my personal email and calendar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;homeassistant&lt;/strong&gt; - To control parts of my house (mostly lights and temp)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notion&lt;/strong&gt; - My &lt;a href=&#34;../../post/trying-notion/&#34;&gt;notes and planning tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Soundcloud&lt;/strong&gt; - For music while working&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, while not used every day, I have made nativefier builds for &lt;strong&gt;twitch&lt;/strong&gt; and
&lt;strong&gt;icloud&lt;/strong&gt;.  These are both apps that exist on other desktops but don&amp;rsquo;t have an
official Linux build.&lt;/p&gt;

&lt;h3 id=&#34;how-i-make-them-feel-like-normal-apps&#34;&gt;How I make them &lt;em&gt;feel&lt;/em&gt; like normal apps&lt;/h3&gt;

&lt;p&gt;There are a few steps I take to help make these builds &lt;em&gt;feel&lt;/em&gt; more like native
ones.&lt;/p&gt;

&lt;h4 id=&#34;desktop-files&#34;&gt;Desktop Files&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/automated-nativefier-app-builds/nativefier_krunner.png&#34;&gt;&lt;img alt=&#34;The builds show up as normal applications&#34; src=&#34;../../img/posts/automated-nativefier-app-builds/nativefier_krunner.png&#34; style=&#34;max-width:
100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The Pocket and Pocketcasts builds showing as normal
applications in search&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The first, and argualy most important step I take, is creating a &lt;a href=&#34;https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html&#34;&gt;desktop
entity&lt;/a&gt;
for each nativefier build. A desktop entity defines an application
in Gnome and KDE Plasma desktop environments, allowing it to show up in menus and
launchers. Defining an entity for the nativefier builds tells the system to to
treat the build as a normal application, which is what we want.&lt;/p&gt;

&lt;h4 id=&#34;icons&#34;&gt;Icons&lt;/h4&gt;

&lt;p&gt;The second action I&amp;rsquo;ve started doing is making sure that I use proper icons
when I &lt;em&gt;run&lt;/em&gt; nativefier. I already needed the icon for creating the desktop
entity, but I noticed the icon displayed in the running app often didn&amp;rsquo;t match
the one defined in the desktop file. This extra step resolves this issue and
helps make everything look more cohesive.&lt;/p&gt;

&lt;h3 id=&#34;how-i-usually-create-nativefier-builds&#34;&gt;How I &lt;em&gt;usually&lt;/em&gt; create nativefier builds&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/automated-nativefier-app-builds/desktop-app-edit.png&#34;&gt;&lt;img alt=&#34;Coping to a new computer often requires editing all the application files&#34; src=&#34;../../img/posts/automated-nativefier-app-builds/desktop-app-edit.png&#34; style=&#34;max-width:
100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Coping to a new computer often requires editing all the application files&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;While these additional steps help nativefier builds behave like real desktop applications,
it adds a bunch extra work to the creation process. When I want to make a new
nativefier app, I usually have to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install nativefier and it&amp;rsquo;s dependencies (usually in a podman container)&lt;/li&gt;
&lt;li&gt;Build the application to a build directory&lt;/li&gt;
&lt;li&gt;Find an icon for the application and add it to my &lt;code&gt;~/.local/share/icons/&lt;/code&gt;
folder&lt;/li&gt;
&lt;li&gt;Create a new &lt;code&gt;.desktop&lt;/code&gt; file for the application, which involves:

&lt;ul&gt;
&lt;li&gt;Filling out the description&lt;/li&gt;
&lt;li&gt;Changing the exec paths.&lt;/li&gt;
&lt;li&gt;Adding the icon path&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Verify it works (something is usually missing)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To save some time when setting up a new system, I often copy the build
directories along with the desktop and icon files. However, even that can be
quite tedious. For example, if the new system uses a different username (&lt;code&gt;ryan&lt;/code&gt; vs.
&lt;code&gt;rhimmew&lt;/code&gt;), I have to update all of the desktop files to reflect the change.&lt;/p&gt;

&lt;p&gt;We can do better. Lets automate it.&lt;/p&gt;

&lt;h2 id=&#34;using-a-podman-container-instead&#34;&gt;Using a podman container instead&lt;/h2&gt;

&lt;p&gt;Before diving into the automating the steps, there is one improvement
to my normal process I want to make. Instead of installing nativefier from a
&lt;code&gt;npm&lt;/code&gt; install, I want to switch to using an ephemeral nativefier
container for the builds. This has several benefits, including not having to install
dependencies, and always using the latest version for the automation. Plus&amp;hellip;
containers are fun.&lt;/p&gt;

&lt;p&gt;After tweaking the suggested &lt;a href=&#34;https://github.com/jiahaog/nativefier#usage-with-docker&#34;&gt;docker
instructions&lt;/a&gt;, I was
able to get a nativefier container building apps on my desktop using podman:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pull the Image&lt;/span&gt;
podman pull jiahaog/nativefier

&lt;span style=&#34;color:#75715e&#34;&gt;# Run a build for a container&lt;/span&gt;
podman run --rm  -v ICONS_DIR src -v NATIVEFIER_BUILD_DIR target jiahaog/nativefier --icon /src/ICON --name NAME -p linux -a x64 URL /target&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command had a few parameters to swap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ICONS_DIR&lt;/code&gt;: the directory that contains the application icons to build
with.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NATIVEFIER_BUILD_DIR&lt;/code&gt;: the directory to save the application builds to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ICON&lt;/code&gt;: The filename of the image to use for the icon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NAME&lt;/code&gt;: The name of the application (ex: &lt;code&gt;pocket&lt;/code&gt; or &lt;code&gt;homeassistant&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URL&lt;/code&gt;: The &lt;em&gt;url&lt;/em&gt; of the webapp to build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This command spins up a podman container, passes our variables through, and builds a
nativefier app. After finishing, the container automatically deletes itself.&lt;/p&gt;

&lt;h2 id=&#34;automating-the-process&#34;&gt;Automating the process&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve figured out how to run nativefier with podman, we can focus on
writing the automation. Like I have &lt;a href=&#34;../../post/foundryvtt-service-ansible-role/&#34;&gt;done
previously&lt;/a&gt;, I will be implementing the
automation by creating a new role to use in my ansible playbooks. If you are
unfamilar with roles, checkout the &lt;a href=&#34;../../post/ansible-quickstart/&#34;&gt;ansible quickstart
post&lt;/a&gt; I wrote earlier this year.&lt;/p&gt;

&lt;p&gt;To start, I&amp;rsquo;ll create a folder for the new role, with &lt;code&gt;tasks&lt;/code&gt;, &lt;code&gt;defaults&lt;/code&gt;, &lt;code&gt;files&lt;/code&gt;, and
&lt;code&gt;templates&lt;/code&gt; sub directories.&lt;/p&gt;

&lt;h3 id=&#34;vars&#34;&gt;Vars&lt;/h3&gt;

&lt;p&gt;First, lets define default values for the variables we will use in tasks and template files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;user&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ ansible_user_id }}&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# User to run as&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;nativefier_build_dir&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Location to build apps at&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;nativefier_dir&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/{{ user }}/Builds/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Location to move completed builds&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;icons_dir&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/{{ user }}/.local/share/icons/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# App Icon location&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;applications_dir&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/{{ user }}/.local/share/applications/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# desktop entry location&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will define one more variable which won&amp;rsquo;t have a default, &lt;code&gt;nativefier_apps&lt;/code&gt;. However, I&amp;rsquo;ll
talk about that later when we use the role in a playbook.&lt;/p&gt;

&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;Next, lets create the one template file we need for this role: an
&lt;code&gt;application.desktop&lt;/code&gt; file. Create a new file in the &lt;code&gt;templates&lt;/code&gt; directory
named &lt;code&gt;nativefier.desktop.j2&lt;/code&gt; and paste in the following contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[Desktop Entry]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ item.name }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Comment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Nativefier app for {{ item.name }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Exec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ nativefier_dir }}/{{ item.name }}-linux-x64/{{ item.name }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Terminal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Application&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Icon&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ item.icon }}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Categories&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Multimedia;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;TryExec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{ nativefier_dir }}/{{ item.name }}-linux-x64/{{ item.name }}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This template will take the variables for each nativefier app we define in the
playbook, and use them to fill out a desktop file for each app.&lt;/p&gt;

&lt;h3 id=&#34;files&#34;&gt;Files&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/automated-nativefier-app-builds/icons.png&#34;&gt;&lt;img alt=&#34;The icons folder&#34; src=&#34;../../img/posts/automated-nativefier-app-builds/icons.png&#34; style=&#34;max-width:
100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The role&amp;rsquo;s files folder, containing the app icons&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Before writing tasks, there is one more role directory to fill: &lt;code&gt;files&lt;/code&gt;.  We
want to include the icon files for each application in this role. So,  fill the
&lt;code&gt;files&lt;/code&gt; sub-directory with the icon files to use.&lt;/p&gt;

&lt;h3 id=&#34;tasks&#34;&gt;Tasks&lt;/h3&gt;

&lt;p&gt;Time to write the tasks. Create and open up a &lt;code&gt;main.yml&lt;/code&gt; file in the
tasks sub-directory.&lt;/p&gt;

&lt;p&gt;The first few tasks will check and ensure that the directories we intend to use
exist. This is generally a good practice to prevent playbooks from breaking due
to missing folders:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ensure Icon dir exists&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ icons_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;directory&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ensure applications dir exists&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ applications_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;directory&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ensure {{ nativefier_build_dir }} exists&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_build_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;directory&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ensure {{ nativefier_dir }} exists&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_dir }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;directory&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;managing-icon-files&#34;&gt;Managing Icon Files&lt;/h4&gt;

&lt;p&gt;Next, add a small task that will copy the icons we included with the role,
to the user&amp;rsquo;s local icon folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Move icons to local folder&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;copy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;src=&amp;#34;{{ item.icon }}&amp;#34; dest=&amp;#34;{{ icons_dir }}/{{ item.icon }}&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will ensure that all the icons are already in place when we build both the
nativefier app and the &lt;code&gt;.deskop&lt;/code&gt; files.&lt;/p&gt;

&lt;h4 id=&#34;automating-the-podman-builds&#34;&gt;Automating the podman builds&lt;/h4&gt;

&lt;p&gt;We can now define a few tasks that will pull and run the nativefier container
using podman. &lt;em&gt;(Note: This could be done with docker&amp;hellip; but I prefer podman XD)&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pull down nativefier container image&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;shell&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;podman pull jiahaog/nativefier&amp;#34;&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build Nativefier app via podman&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;shell&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;podman run --rm --security-opt label=disable -v {{ icons_dir }}:/src -v {{ nativefier_build_dir }}:/target jiahaog/nativefier --icon /src/{{ item.icon }} --name {{ item.name}} -p linux -a x64 {{ item.url }} /target&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;

- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Clean out nativefier dir&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;become&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_dir }}/{{ item.name }}-linux-x64&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;absent&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# I don&amp;#39;t love this, but copy was too slow&lt;/span&gt;
- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Move Builds to Nativefier Location&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;become&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;shell&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mv {{ nativefier_build_dir }}/{{ item.name }}-linux-x64 {{ nativefier_dir }}/{{ item.name }}-linux-x64&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These tasks also move the built app to the final location.&lt;/p&gt;

&lt;h4 id=&#34;manaing-application-files&#34;&gt;Manaing Application Files&lt;/h4&gt;

&lt;p&gt;Lastly, with icons in place and the application builds complete, we can create the application
entry files by adding this final task:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Generate Application Desktop Files&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;src&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;templates/nativefier.desktop.j2&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;dest&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ applications_dir }}/{{ item.name }}.desktop&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And there we go, that&amp;rsquo;s it! Well&amp;hellip; sort of.&lt;/p&gt;

&lt;h2 id=&#34;selinux-woes&#34;&gt;Selinux woes&lt;/h2&gt;

&lt;p&gt;While this &amp;lsquo;&lt;em&gt;worked on my computer&lt;/em&gt;&amp;rsquo;, when I tested it on my laptop and
in some VMs&amp;hellip; it failed.&lt;/p&gt;

&lt;h3 id=&#34;issues&#34;&gt;Issues&lt;/h3&gt;

&lt;p&gt;Every time I ran the playbook, I hit this error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Error during build. Run with --verbose &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; details. &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Error: EACCES: permission denied, mkdir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/target/linux-x64-template&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  errno: -13,
  code: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EACCES&amp;#39;&lt;/span&gt;,
  syscall: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mkdir&amp;#39;&lt;/span&gt;,
  path: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/target/linux-x64-template&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was able to tell the error occurred while running the podman container. I
assumed it might be &lt;code&gt;selinux&lt;/code&gt; related, but was unable to sort out a solution
right away.&lt;/p&gt;

&lt;h3 id=&#34;the-fix&#34;&gt;The Fix&lt;/h3&gt;

&lt;p&gt;Eventually after browsing the internet, I learned that my easiest solution was
to add the option &lt;code&gt;--security-opt label=disable&lt;/code&gt; to my &lt;code&gt;podman run&lt;/code&gt; command, to
turn off label separation for the container. I&amp;rsquo;m sure there is a better, more
secure soltion I could do. However, I figured this was at least a good compromise of
being easy to implement, but more secure than the common (and wrong) suggestion
of &amp;ldquo;&lt;em&gt;just disable selinux&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;one-last-fix&#34;&gt;One last fix&amp;hellip;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;drwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100999&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100999&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt; Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; 20:40 jellyfin-linux-x64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, I wanted to add one more cleanup task. My builds had the ugly uid/gid
pair of &lt;code&gt;100999 100999&lt;/code&gt;, so I a task to change ownership to the &lt;code&gt;user&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Change Permissons of Nativefier Dirs&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;become&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_dir }}/{{ item.name }}-linux-x64&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;owner&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ user }}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;group&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ user }}&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;loop&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ nativefier_apps }}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that change:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;drwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ryan ryan  &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt; Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; 20:40 jellyfin-linux-x64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Much better!&lt;/p&gt;

&lt;h2 id=&#34;example-adding-it-to-my-playbooks&#34;&gt;Example adding it to my playbooks&lt;/h2&gt;

&lt;p&gt;With the role complete, it is &lt;em&gt;finally&lt;/em&gt; time to add it to a playbook. I define
playbooks to provision all of my machines, so I will just add it to them. First
make sure the role is added to the list of roles used by the playbook.  For
example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  roles:
    - apps/nativefier&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, define a new var named &lt;code&gt;nativefier_apps&lt;/code&gt;. This variable is a list of
dictionaries, with each dictionary providing the values for a different
nativefier application. Each nativefier build requires three variables to be
defined:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The name of the application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icon&lt;/code&gt;: The filename (including ext) of the icon file to for the application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: The address for the webpage to build as a nativefier app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, to build my &lt;code&gt;pocket&lt;/code&gt;, &lt;code&gt;fastmail&lt;/code&gt;, and &lt;code&gt;homeassistant&lt;/code&gt; apps, I added the
following to my playbook:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;nativefier_apps&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pocket&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;icon&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pocket.png&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://app.getpocket.com&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fastmail&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;icon&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;fastmail.png&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.fastmail.com&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;homeassistant&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;icon&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;homeassistant.png&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://homeassistant.local:8123&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That should be it! Afterwards, my playbooks could build and configure all
my nativefier applications automatically!&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/automated-nativefier-app-builds/nativefier-windows.png&#34;&gt;&lt;img alt=&#34;My desktop covered in nativefier apps&#34; src=&#34;../../img/posts/automated-nativefier-app-builds/nativefier-windows.png&#34; style=&#34;max-width:
100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;My desktop covered in some of my nativefier apps.&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;I have wanted to create this role for a very long time and am glad I finally
did. Nativefier is such an amazing tool, and paring it with podman and ansible
has somehow managed to make it shine even more. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PIA Client Interfering with Podman Containers</title>
      <link>http://ryan.himmelwright.net/post/pia-client-podman-issues/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/pia-client-podman-issues/</guid>
      <description>&lt;p&gt;Earlier this month, I woke up and tried to start working on my &lt;a href=&#34;../../post/pytest-parallel-website-tests/&#34;&gt;previous
post&lt;/a&gt;, but quickly hit a snag.
I was unable to start the
&lt;a href=&#34;https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/&#34;&gt;toolbox&lt;/a&gt;
container I use while working on my website. In fact, &lt;em&gt;none&lt;/em&gt; of my podman
containers would start.&lt;/p&gt;

&lt;h2 id=&#34;was-podman-broken&#34;&gt;Was Podman Broken?&lt;/h2&gt;

&lt;p&gt;Specifically, when I tried to start a container I encountered this error
message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;podman start website
Error: unable to start container &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f8ab31d42b9d04d051b23c65604e19748a9496f17bd3baab8e6f947eee8f3692&amp;#34;&lt;/span&gt;: creating cgroup directory &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/sys/fs/cgroup/net_cls/user.slice/user-1000.slice/user@1000.service/user.slice/libpod-f8ab31d42b9d04d051b23c65604e19748a9496f17bd3baab8e6f947eee8f3692.scope/container&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;: No such file or directory: OCI runtime command not found error&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, I attempted to use  podman on a different computer. It worked fine. I
compared version numbers and noticed that the second computer had a newer
version of podman installed. I figured that I had hit a bug that must now be fixed,
so I waited for the update to reach my desktop (it wasn&amp;rsquo;t available on that
machine yet for some reason).&lt;/p&gt;

&lt;p&gt;A day later when I ran my updates, the new version of &lt;code&gt;podman&lt;/code&gt; was installed, which
I thought would surely fix my problem. It didn&amp;rsquo;t. (ಠ_ಠ)&lt;/p&gt;

&lt;h2 id=&#34;the-issue&#34;&gt;The Issue&lt;/h2&gt;

&lt;p&gt;I started to scour the internet again to look for answers. Eventually, I
found &lt;a href=&#34;https://www.reddit.com/r/Fedora/comments/hqbo34/podman_cgroup_issues_on_f32/&#34;&gt;this reddit
post&lt;/a&gt;.
While reading it, the poster&amp;rsquo;s experience sounded &lt;em&gt;very&lt;/em&gt; similar to my own.
After reading some of the comments that connected the &lt;a href=&#34;https://www.privateinternetaccess.com&#34;&gt;private internet
access&lt;/a&gt; client to the original poster&amp;rsquo;s
issues, I suddenly remembered&amp;hellip; I had installed the &lt;a href=&#34;https://www.privateinternetaccess.com/pages/download&#34;&gt;PIA
client&lt;/a&gt; on my machine
earlier that week!&lt;/p&gt;

&lt;p&gt;Sure enough, when I checked the ownership of my &lt;code&gt;net_cls&lt;/code&gt; files (as suggested
in the thread), it looked like &lt;code&gt;piavpn&lt;/code&gt; was claiming group ownership of the
files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜  ~ ll /sys/fs/cgroup/net_cls
total &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.clone_children
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.procs
-r--r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.sane_behavior
drwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; root root   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 machine.slice
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 net_cls.classid
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 notify_on_release
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 release_agent
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root piavpn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 tasks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some commenters in the thread stated that the conflict went away after they
removed the PIA client.&lt;/p&gt;

&lt;h2 id=&#34;removing-the-pia-client&#34;&gt;Removing the PIA Client&lt;/h2&gt;

&lt;p&gt;As a result, I decided to un-install my PIA client. It wasn&amp;rsquo;t a major loss for
me, as I hadn&amp;rsquo;t used it in months. I only installed it to double check if it
was a service I wanted, or if I should cancel my subscription before it
auto-renewed later that month.&lt;/p&gt;

&lt;p&gt;At first, I couldn&amp;rsquo;t find an &lt;em&gt;un&lt;/em&gt;-install option, but eventually found it deep
in the settings. After removing the client, the &lt;code&gt;piavpn&lt;/code&gt; group went away&amp;hellip; sort
of. It still had a &lt;code&gt;1004&lt;/code&gt; gid, which I&amp;rsquo;m guessing &lt;em&gt;was&lt;/em&gt; the previous &lt;code&gt;piavpn&lt;/code&gt;
group.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜  ~ ll /sys/fs/cgroup/net_cls
total &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.clone_children
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.procs
-r--r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 cgroup.sane_behavior
drwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 machine.slice
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 net_cls.classid
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 notify_on_release
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 release_agent
-rw-r--r--. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 21:21 tasks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whatever the case&amp;hellip; podman still didn&amp;rsquo;t work.&lt;/p&gt;

&lt;h2 id=&#34;don-t-forget-to-reboot&#34;&gt;&amp;hellip; Don&amp;rsquo;t forget to Reboot!&lt;/h2&gt;

&lt;p&gt;I was furious. After calming down, I reasoned it probably still wasn&amp;rsquo;t working
due to cruft from the client lingering on my system (like the &lt;code&gt;1004&lt;/code&gt; group for
example), so I rebooted my desktop&amp;hellip; and it worked!&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In conclusion&amp;hellip; why did I write this post? This complication was a huge pain
to troubleshoot.  It was only by chance that I stumbled on that reddit post,
and would have had an even &lt;em&gt;harder&lt;/em&gt; time without it. I assume having at least
&lt;em&gt;one&lt;/em&gt; more page on the internet stating that podman and the PIA client don&amp;rsquo;t
play nice, might help others find the solution quicker. Hence, this post.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://media.giphy.com/media/3rgXBBaVvhPXk3NSnK/giphy.gif&#34; alt=&#34;Frustation meme&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Before I end, it is worth nothing that some users reported that configuring the PIA openvpn
profiles and using &lt;em&gt;them&lt;/em&gt; to connect to the VPN works without issue. It is just
the &lt;em&gt;client&lt;/em&gt; that breaks containers. So if you want to still use PIA (I let
mine expire. I don&amp;rsquo;t use it enough), give it a try!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker Quick Start</title>
      <link>http://ryan.himmelwright.net/post/docker-quickstart/</link>
      <pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/docker-quickstart/</guid>
      <description>&lt;p&gt;Over the past few months (particularly over the holiday season), I started to
explore and learn several technologies I&amp;rsquo;ve had my eye on the last few years.
First on the list: &lt;a href=&#34;https://docker.io&#34;&gt;Docker&lt;/a&gt;. These days, Docker has a massive
ecosystem surrounding it, and can take years to truly master. This post on the
other hand, will &lt;em&gt;hopefully&lt;/em&gt; help you get up and playing with docker containers in
just a few minutes. Lets get started.&lt;/p&gt;

&lt;h2 id=&#34;installing-docker&#34;&gt;Installing Docker&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-logo.png&#34; style=&#34;max-width: 100%; width: 400px; float: right; margin: 0px 15px 5px 5px;&#34; alt=&#34;Docker Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Installing docker on &lt;a href=&#34;https://getsol.us&#34;&gt;Solus&lt;/a&gt; was easy enough. I just
had to install the package, and then enable the service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo eopkg it docker
sudo systemctl enable docker
sudo systemctl start docker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On other distributions, it may not be in the package manager, or it might be
under a different name. To be sure, check out the community edition
&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/fedora/#set-up-the-repository&#34;&gt;installation
documentation&lt;/a&gt;
for your specific distro.&lt;/p&gt;

&lt;h2 id=&#34;adding-user-to-docker-group&#34;&gt;Adding User to Docker Group&lt;/h2&gt;

&lt;p&gt;By default, user accounts will not have permission to run docker commands
without root access. So, after first installing docker, it might be tempting to
just run everything using &lt;code&gt;sudo&lt;/code&gt;, but that isn&amp;rsquo;t the best idea. To get around
this, simply add the user account to the &lt;code&gt;docker&lt;/code&gt; group:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo usermod -a -G docker ryan&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the docker group is not created for some reason, it can be added:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo groupadd docker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards, that user should be able to run docker commands without requiring
&lt;code&gt;sudo&lt;/code&gt;. They &lt;em&gt;might&lt;/em&gt; have to log out and back in first.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: These commands may differ based on distro.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;some-useful-commands&#34;&gt;Some Useful Commands&lt;/h2&gt;

&lt;p&gt;Before getting too caught up in creating and using containers, lets first go
over a few useful commands that make navigating docker a bit easier.&lt;/p&gt;

&lt;h4 id=&#34;docker-ps&#34;&gt;docker ps&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-ps.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-ps.png&#34; style=&#34;max-width: 100%; float: left; margin: 0px 15px 0px 0px;&#34; alt=&#34;Docker ps&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Example of the docker ps and docker ps -a commands&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Similar to how Unix-based systems have the &lt;code&gt;ps&lt;/code&gt; command to see running
processes, docker has &lt;code&gt;docker ps&lt;/code&gt; to see created and running containers. To
view the currently running containers, use the basic &lt;code&gt;docker ps&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;The base command however, doesn&amp;rsquo;t always tell the whole story. A system might
have containers that &lt;em&gt;exist&lt;/em&gt; but are not running. A container may have been
stopped, &lt;em&gt;or&lt;/em&gt; exited if it encountered an error. Containers that are stopped or
exited &lt;em&gt;will not&lt;/em&gt; show up in the default &lt;code&gt;docker ps&lt;/code&gt; command. To see &lt;em&gt;all&lt;/em&gt; of the
current containers on the system, run &lt;code&gt;ps&lt;/code&gt; with the &lt;code&gt;-a&lt;/code&gt; flag.&lt;/p&gt;

&lt;h4 id=&#34;docker-inspect&#34;&gt;docker inspect&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-inspect.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-inspect.png&#34; style=&#34;max-width: 100%; float: left; margin: 0px 15px 0px 0px;&#34; alt=&#34;Docker inspect examples: docker inspect web-test | grep Status and docker inspect web-test | grep IPAddress&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Using the docker inspect command to get the container&amp;rsquo;s status and IP address&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Another useful command when working with docker containers is &lt;code&gt;docker inspect&lt;/code&gt;.
The &lt;code&gt;inspect&lt;/code&gt; command will dump the xml for all the low level information of the
container/docker object. The output contains basically &lt;em&gt;everything&lt;/em&gt; about the
container: Full ID, time created, state, volumes, network information&amp;hellip;
everything. It can be useful to pipe the output of &lt;code&gt;inspect&lt;/code&gt; to grep, in order
to get specific information about the container quickly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker inspect container_name | grep IPAddress&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, the above command will grab and return only the lines which contain
&amp;ldquo;IPAddress&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;help&#34;&gt;help&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-help.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-help.png&#34; style=&#34;max-width: 100%; float: left; margin: 0px 15px 0px 0px;&#34; alt=&#34;Using the docker help command flags. For Example: docker inspect --help&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Using the docker help command flags.&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, don&amp;rsquo;t forget about the &lt;code&gt;help&lt;/code&gt; command. To see all the
available docker commands, run &lt;code&gt;docker help&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, when using each of those specific commands, (&lt;code&gt;inspect&lt;/code&gt; for
example), a description and possible options can be shown using the &lt;code&gt;--help&lt;/code&gt;
flag (as in &lt;code&gt;docker inspect --help&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Just as man pages can be extremely valuable when working on a Linux system,
&lt;code&gt;help&lt;/code&gt; is just as essential when using docker.&lt;/p&gt;

&lt;h2 id=&#34;images&#34;&gt;Images&lt;/h2&gt;

&lt;p&gt;A docker container is created from a base &lt;em&gt;image&lt;/em&gt;. Images can be pulled down
from &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Dockerhub&lt;/a&gt;. To search docker hub from command
line, use the &lt;code&gt;docker search&lt;/code&gt; command. For example, &lt;code&gt;docker search nginx&lt;/code&gt; will
search for images related to nginx.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-search.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-search.png&#34; style=&#34;max-width: 100%; float: left; margin: 0px 15px 0px 0px;&#34; alt=&#34;Docker Search output. Ex: docker search nginx&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;The search output for nginx images&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The search will list all of the public images in order, from most to least
stars. When a desired image is found, pull it down using the &lt;code&gt;docker pull&lt;/code&gt;
command. For example, &lt;code&gt;docker pull nginx&lt;/code&gt; will pull down the &lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;nginx
image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-pull.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-pull.png&#34; style=&#34;max-width: 100%; width:100%; float: left; margin: 0px 15px 0px 0px;&#34; alt=&#34;Docker Pull output. Ex: docker pull nginx&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Pulling the latest nginx image&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Docker will then download all the layers for the image. When the download
completes, the image will be locally available to create docker containers
from. To see all of the local images, use the &lt;code&gt;docker images&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;To delete an image, use the &lt;code&gt;docker images rm&lt;/code&gt; command, or my preferred, lazier
command, &lt;code&gt;docker rmi&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-images.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-images.png&#34; style=&#34;max-width: 100%; float: left; margin: 0px 15px 0px 0px;&#34; alt=&#34;docker images and docker rmi. Ex: docker images, then docker rmi test-ubuntu&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Viewing downloaded images with the docker images command, then deleting the &amp;ldquo;test-ubuntu&amp;rdquo; image using the docker rmi command&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Lastly, it should be noted that custom images can be created/tailored using a
&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#usage&#34;&gt;Dockerfile&lt;/a&gt;. With a
Dockerfile is defined, an image can be created from it using the &lt;code&gt;docker build&lt;/code&gt;
command. For example, the following Dockerfile would use an
&lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34;&gt;ubuntu&lt;/a&gt; image for the base, but also update &amp;amp;
install several packages in the image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is a custom ubuntu image with SSH already installed&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;FROM ubuntu:latest&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;MAINTAINER himmallright &amp;lt;ryan.himmelwright@gmail.com&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#ae81ff&#34;&gt;RUN apt-get update&lt;/span&gt;

&lt;span style=&#34;color:#ae81ff&#34;&gt;RUN apt-get install -y vim stow git tmux fish htop emacs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build the image, run the following command in the same directory as the
Dockerfile (if defining a specific file, the &lt;code&gt;-f&lt;/code&gt; flag can be used):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker build -t ubuntu-base:v1 .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like to use the &lt;code&gt;-t&lt;/code&gt; flag, so that I can specify a &lt;code&gt;name:tag&lt;/code&gt; for the image.
This helps to make it easier to find it in the &lt;code&gt;docker images&lt;/code&gt; list.&lt;/p&gt;

&lt;h2 id=&#34;creating-containers&#34;&gt;Creating Containers&lt;/h2&gt;

&lt;p&gt;Docker containers can be &lt;em&gt;created&lt;/em&gt; (but not run) with the &lt;code&gt;docker create&lt;/code&gt;
command. When creating containers, it is useful to use flags to tailor the
details of the container. For example, the &lt;code&gt;-m&lt;/code&gt; flag can be used to create a
memory limit, &lt;code&gt;--name&lt;/code&gt; to name the container, and so on. To create a simple nginx
container from the image we previously pulled:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker create --name web-test nginx:latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;starting-running-containers&#34;&gt;Starting &amp;amp; Running Containers&lt;/h2&gt;

&lt;p&gt;To &lt;em&gt;start&lt;/em&gt; a container created with &lt;code&gt;docker create&lt;/code&gt;, or one that has been previously
stopped, use the &lt;code&gt;docker start&lt;/code&gt; command. For example, to start
the container created in the previous step:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker start web-test&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, a container can be stopped with &lt;code&gt;docker stop&lt;/code&gt;, or restarted with
&lt;code&gt;docker restart&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead of using a &lt;code&gt;docker create&lt;/code&gt; and &lt;code&gt;docker start&lt;/code&gt; combination, &lt;code&gt;docker run&lt;/code&gt;
can be used to both instantiate &lt;em&gt;and&lt;/em&gt; start a container. To create and start the
&amp;ldquo;web-test&amp;rdquo; container from the previous examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name web-test -d nginx:latest&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;cleaning-containers&#34;&gt;Cleaning containers&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-rm.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-rm.png&#34; style=&#34;max-width: 100%; float: left; width: 95%;&#34; alt=&#34;Docker rm all images. Ex: docker rm `docker ps -aq`&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Removing all the older container images&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Over time, old containers may build up on the system. To remove an old (but not
running) container, use &lt;code&gt;docker rm&lt;/code&gt; with either the container name, &lt;em&gt;or&lt;/em&gt; the id.
Note, to easily delete &lt;em&gt;all&lt;/em&gt; of the containers on the system, &lt;code&gt;docker rm&lt;/code&gt; can be
fed the output of &lt;code&gt;docker ps -aq&lt;/code&gt;, where the &lt;code&gt;-aq&lt;/code&gt; flag returns a list of all
the container ids.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker rm &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;docker ps -aq&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;(Note: this doesn&amp;rsquo;t work in my Fish shell, but does in bash)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;attaching-to-containers&#34;&gt;Attaching to Containers&lt;/h2&gt;

&lt;p&gt;After a container is running, it might occasionally be necessary to attach to
it and poke around with a shell. There is the obvious way to do this,
&lt;code&gt;docker attach&lt;/code&gt;, and a somewhat work-around way, which I prefer to use: &lt;code&gt;docker
exec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-attach.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-attach.png&#34; style=&#34;max-width: 100%; float: left;&#34; alt=&#34;Docker attach example&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;An example using the docker attach command&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The attach command works as one would expect. It allows a user to &amp;ldquo;Attach local
standard input, output, and error streams to a running container&amp;rdquo;. This is all
well an good, except for one issue: when exiting the attached container, the
&lt;em&gt;container also&lt;/em&gt; exits.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-exec-bash.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-exec-bash.png&#34; style=&#34;max-width: 100%; float: left;&#34; alt=&#34;Docker exec bash example&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;An example using docker exec with a bash shell, as an alternative to docker attach&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;A way around this annoyance is to utilize the &lt;code&gt;docker exec&lt;/code&gt; command, which
allows a command to be executed inside a container. Executing a shell program
inside the container, such as &lt;code&gt;bash&lt;/code&gt;, mimics the &lt;code&gt;attach&lt;/code&gt; command, but with the
added benefit that when exiting, only the shell exits, and &lt;em&gt;not&lt;/em&gt; the entire
container.&lt;/p&gt;

&lt;h2 id=&#34;ports-volumes&#34;&gt;Ports &amp;amp; Volumes&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, docker containers can be built and run using many specific
commands to tailor the container and how it interfaces with the host system.
There are two concepts in particular that I want to briefly touch on in this
&lt;em&gt;quick start&lt;/em&gt; post. Those two items, are &lt;code&gt;ports&lt;/code&gt; and &lt;code&gt;volumes&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;ports&#34;&gt;Ports&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/nginx-firefox-port.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/nginx-firefox-port.png&#34; style=&#34;max-width: 100%; float: center;&#34; alt=&#34;Containerized nginx server connected to through localhost&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Container ports can be forwarded to the host&amp;rsquo;s ports.&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;While it is nice to spin up a web server inside a docker container, it isn&amp;rsquo;t
always very useful to only have it available to the host machine. By using the
&lt;code&gt;-p&lt;/code&gt; flag when running a container, the container&amp;rsquo;s ports can be forwarded to
ports on the host system.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-port.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-port.png&#34; style=&#34;max-width: 100%; float: center;&#34; alt=&#34;Creating an nginx container, forwarding port 80 to he host&#39;s 8081&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Creating an nginx container, forwarding it&amp;rsquo;s port 80 to the host&amp;rsquo;s port 8081&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;-p&lt;/code&gt; with just a single number, as in &lt;code&gt;-p 8080&lt;/code&gt;, will declare that port of
the container to be exposed. To forward exposed ports to the host, use &lt;em&gt;two&lt;/em&gt;
port numbers, separated with a &lt;code&gt;:&lt;/code&gt;. The first number is the host port to bind
to, and the second is the container port to expose and forward.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -itd --name webtest -p 8081:80 nginx:latest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example, a nginx container is started with port 80 forwarded to port
8081 on the host. As a result, any computer connecting to port 8081 of the host
machine will be directed to the nginx web server inside the container.&lt;/p&gt;

&lt;h4 id=&#34;volumes&#34;&gt;Volumes&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/nginx-firefox-volume.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/nginx-firefox-volume.png&#34; style=&#34;max-width: 100%; float: center;&#34; alt=&#34;Nginx container with website pages in a volume from the host.&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Containers can attach volumes from the host system for persistent data.&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Lastly, by design docker containers are mean to be expendable. They are run, and then
disposed. It should not be assumed that &lt;em&gt;any&lt;/em&gt; data inside the container will
be preserved by default. That is, unless
&lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;volumes&lt;/a&gt; are used.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/docker-quickstart/docker-volume.png&#34;&gt;&lt;img src=&#34;../../img/posts/docker-quickstart/docker-volume.png&#34; style=&#34;max-width: 100%; float: center;&#34; alt=&#34;Creating an nginx container, forwarding port 80 to he host&#39;s 8081&#34; /&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Creating an nginx container, forwarding it&amp;rsquo;s port 80 to the host&amp;rsquo;s port 8081&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Docker volumes are the preferred mechanism for preserving data across container
runs, and are specified using the &lt;code&gt;-v&lt;/code&gt; flag. Similar to setting ports, volumes
can be created by providing either a single path, or two separated by a &lt;code&gt;:&lt;/code&gt;.
When a single path is provided, as in &lt;code&gt;-v /Data&lt;/code&gt;, docker will create a volume
and bind it to that location within the container. Two locations can be provided
to bind a directory on the host system, to the volume inside to container.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d --name testsite -v /home/ryan/testsite/:/usr/share/nginx/html nginx:latest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above command, for example, &lt;code&gt;-v
/home/ryan/testsite/:/usr/share/nginx/html&lt;/code&gt; will use the &lt;code&gt;/home/ryan/testsite/&lt;/code&gt;
directory of the host system, as a volume located at &lt;code&gt;/usr/share/nginx/html&lt;/code&gt;
inside the container. This means that the container will server the website
files, which are located (and can be easily edited), on the host system.&lt;/p&gt;

&lt;h2 id=&#34;in-conclusion&#34;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;So, this has been&amp;hellip; a rather long post. However, when it comes to Docker, this
&lt;em&gt;really is just the tip of the iceberg&lt;/em&gt;. With any luck though, you should now
know the basic to at &lt;em&gt;least&lt;/em&gt; get &lt;em&gt;started&lt;/em&gt;. So&amp;hellip; go ahead and have some fun!.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
