<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KVM on λ ryan. himmelwright. net</title>
    <link>http://ryan.himmelwright.net/tags/kvm/</link>
    <description>Recent content in KVM on λ ryan. himmelwright. net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Sep 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://ryan.himmelwright.net/tags/kvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Running VMs with VirtIO 3D Acceleration</title>
      <link>http://ryan.himmelwright.net/post/virtio-3d-vms/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/virtio-3d-vms/</guid>
      <description>&lt;p&gt;While on vacation the other week, the only laptop I brought along was &lt;a href=&#34;http://ryan.himmelwright.net/post/new-2019-16inch-mbp/&#34;&gt;my
macbook pro&lt;/a&gt;. That
being said, I still wanted the ability to jump into Linux while I was away.  I
needed to virtualize. I&amp;rsquo;ve used VirtualBox in the past, and while it&amp;rsquo;s &lt;em&gt;fine&lt;/em&gt;
for running headless installs, I find that it is not a great experience on
macOS when trying to run a full desktop environment. So I downloaded the free
trial of &lt;a href=&#34;https://www.parallels.com/blogs/just-released-parallels-desktop-for-mac/&#34;&gt;parallels desktop
15&lt;/a&gt;,
and honestly&amp;hellip; it was great. Afterwards, I was motivated to improve the
experience of VMs running on my (Linux) desktop.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/parallels.png&#34;&gt;
&lt;img alt=&#34;Parallels Desktop on MacOS&#34; src=&#34;../../img/posts/virtio-3d-vms/parallels.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Parallels desktop on MacOS&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Parallels handled graphics on both my Windows and Linux guests wonderfully. I
would full-screen the VM and it felt like I was running that OS directly on my
macbook (for the most part). I was sad when the trial was over, but decided not
to buy the subscription. My main reason being&amp;hellip; my VM computer is &lt;em&gt;not&lt;/em&gt; my
macbook, it&amp;rsquo;s my Linux desktop.&lt;/p&gt;

&lt;p&gt;I love libvirt and virt-manager, but using parallels showed me that I really
needed to figure out how to improve the graphics situation of my VMs to catch
up. I wanted to be able to work in guest VMs, without a lagging
UI or &lt;em&gt;feeling&lt;/em&gt; like I was &lt;em&gt;in&lt;/em&gt; a VM.&lt;/p&gt;

&lt;h3 id=&#34;vfio-gpu-passthrough&#34;&gt;VFIO - GPU Passthrough&lt;/h3&gt;

&lt;p&gt;Prior to my trip, I had been experimenting &lt;em&gt;once again&lt;/em&gt; with VFIO&amp;hellip; and
actually got it working* for the first time. If you don&amp;rsquo;t know what this means,
basically in Linux it is possible to pass a full device, like a GPU, through to
a VM to be used directly. The technology was made more widely known a few years
ago from the &amp;ldquo;X Gamers, 1 CPU&amp;rdquo; serries of videos Linux Tech Tips made.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LuJYMCbIbPk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&#34;caption&#34;&gt;The first video of the serries, 2 Gaming PCs 1 Tower&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;I was able to temporarily run both Proxmox and Unraid on my desktop, and pass
my gpu directly to Fedora VMs.  While it was a neat experiment, I realized it
can also be quite a pain.&lt;/p&gt;

&lt;p&gt;I currently only have one GPU in my desktop, so to pass it to the VM I had to
disable it on the host. Not having a GPU for the host system meant that I had
to start the VMs from another device, which honestly isn&amp;rsquo;t &lt;em&gt;that&lt;/em&gt; bad. The much
worse issue however, was that the gpu would often get stuck while being passed
around, so I had to reboot my host whenever the VM restarted&amp;hellip; which defeated
the point of using a VM instead of multi-booting.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6T_-HMkgxt0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&#34;caption&#34;&gt;Gaming on Linux continues to get better over time&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;So to &lt;em&gt;properly&lt;/em&gt; utilize VFIO and have a more stable setup, I would want a
second GPU. In truth though, I realized this setup wasn&amp;rsquo;t what I was looking
for. KVM gpu passthrough is a great option if you run Linux as your main
computer, but want to be able to boot into a Windows VM to play games. But GPU
passthrough is slowly becoming overkill even for &lt;em&gt;that&lt;/em&gt;, as gaming support on
Linux keeps getting better.&lt;/p&gt;

&lt;p&gt;Aside from having an occasional Windows VM to play around with, I mostly want
to run Linux VMs on a Linux host. I needed to figure out how to let my VMs
utilize the &lt;em&gt;power&lt;/em&gt; of my GPU, without the complications of GPU passthrough&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;virgil&#34;&gt;Virgil&lt;/h3&gt;

&lt;p&gt;Introducing, &lt;a href=&#34;https://virgil3d.github.io&#34;&gt;virgil&lt;/a&gt;. According to the
project&amp;rsquo;s website:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Virgil is a research project to investigate the possibility of creating a virtual 3D GPU for use inside qemu virtual machines, that allows the guest operating system to use the capabilities of the host GPU to accelerate 3D rendering. The plan is to have a guest GPU that is fully independent of the host GPU.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, Virgil essentially allows libvirt to create &lt;em&gt;virtual 3D GPUs&lt;/em&gt;, that work
with the host GPU for 3D acceleratuon.  This means, that I &lt;em&gt;should&lt;/em&gt; be able to
get high performing VMs, including the graphics, on my Linux desktop.&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Enabling virgil for a VM using virt-manager actually ended up be much easier
that I had anticipated. Here is how to do it:&lt;/p&gt;

&lt;h3 id=&#34;create-a-vm&#34;&gt;Create a VM&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/new_fedora_vm.png&#34;&gt;
&lt;img alt=&#34;Newly Created Fedora VM&#34; src=&#34;../../img/posts/virtio-3d-vms/new_fedora_vm.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Newly created Fedora VM&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;First, create and install a new virtual machine using &lt;code&gt;virt-manager&lt;/code&gt;. I
recommend going through your normal install process and then boot into the
installed system once, just to ensure that everything works as expected. If
things look good, shutdown the VM and open up the settings window.&lt;/p&gt;

&lt;h3 id=&#34;enable-virtio-and-3d-acceleration&#34;&gt;Enable VirtIO and 3D Acceleration&lt;/h3&gt;

&lt;h4 id=&#34;spice-settings&#34;&gt;Spice Settings&lt;/h4&gt;

&lt;p&gt;In the settings menu, open up the &lt;em&gt;Display Spice&lt;/em&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;a href=&#34;img/posts/virtio-3d-vms/display_spice_config_post.png&#34;&gt;
&lt;img alt=&#34;Virt-manager&#39;s Spice settings for a VM&#34; src=&#34;../../img/posts/virtio-3d-vms/display_spice_config_post.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;In the VM&amp;rsquo;s &amp;lsquo;Display Spice&amp;rsquo; config, select &amp;lsquo;None&amp;rsquo; for
Listen type, and check the box for OpenGL&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Spice server&lt;/code&gt; for &lt;code&gt;Type:&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt; for &lt;code&gt;Listen type:&lt;/code&gt; (virgil only
works on local VMs right now). Lastly, make sure that the &lt;code&gt;OpenGL&lt;/code&gt; checkbox
&lt;em&gt;is&lt;/em&gt; checked. Hit &lt;code&gt;Apply&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;virtio-settings&#34;&gt;Virtio Settings&lt;/h4&gt;

&lt;p&gt;Next, select the &lt;em&gt;Video Virtio&lt;/em&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;img/posts/virtio-3d-vms/video_config_post.png&#34;&gt;
&lt;img alt=&#34;Virt-manager&#39;s Video settings for a VM&#34; src=&#34;../../img/posts/virtio-3d-vms/video_config_post.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;In the VM&amp;rsquo;s video settings, switch to Virtio and select 3D
acceleration&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Switch to &lt;code&gt;Virtio&lt;/code&gt; for &lt;code&gt;Model:&lt;/code&gt;, and make sure to check the &lt;code&gt;3D acceleration&lt;/code&gt;
checkbox. That&amp;rsquo;s it! Hit apply, start up the VM, and verify that it is working.&lt;/p&gt;

&lt;h2 id=&#34;testing-and-comparisons&#34;&gt;Testing and Comparisons&lt;/h2&gt;

&lt;h3 id=&#34;youtube-video-playback&#34;&gt;Youtube Video Playback&lt;/h3&gt;

&lt;p&gt;While configuring this for the first time, there were a few benchmarks I used
to tell if and how well it was working. The first one, was simply opening up
Firefox and trying to play a fullscreen Youtube Video (at 1440p).&lt;/p&gt;

&lt;p&gt;Now to be fair, the video playback was still &lt;em&gt;okay&lt;/em&gt; before I made this change.
This wasn&amp;rsquo;t a good measure, but rather an initial test.&lt;/p&gt;

&lt;h3 id=&#34;unigine-heaven-benchmark&#34;&gt;Unigine Heaven Benchmark&lt;/h3&gt;

&lt;p&gt;My next step was to give the VM a &lt;em&gt;real&lt;/em&gt; GPU test, so I downloaded the &lt;a href=&#34;https://benchmark.unigine.com/heaven&#34;&gt;Unigine
Heaven Benchmark&lt;/a&gt;. First I got my
baseline by running the benchmark directly on my host system. &lt;em&gt;It should be
noted that I did have other applications running during all of these benchmarks&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/unigine_heaven_score_host_export.png&#34;&gt;
&lt;img alt=&#34;Unigine Heaven Benchmark - Host&#34; src=&#34;../../img/posts/virtio-3d-vms/unigine_heaven_score_host_export.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Unigine Heaven Benchmark running directly on the host (my
desktop)&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;So not bad, and roughly what I expected. Next, I tried running it in the VM&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/unigine_heaven_score_vm_export.png&#34;&gt;
&lt;img alt=&#34;Unigine Heaven Benchmark - VM&#34; src=&#34;../../img/posts/virtio-3d-vms/unigine_heaven_score_vm.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Unigine Heaven Benchmark running inside the VM with
&lt;em&gt;shared&lt;/em&gt; graphics&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;While not as good as on the host, it is a &lt;em&gt;very&lt;/em&gt; respectable result. Especially
after remembering that the VM had less cores and RAM assigned to it compared to
the host.&lt;/p&gt;

&lt;p&gt;Additionally, my default VM &lt;em&gt;wouldn&amp;rsquo;t even run&lt;/em&gt; the benchmark. I was
able to open it, but the load screen ran frame-by-frame. Turning on the
3D acceleration settings definitely made a difference.&lt;/p&gt;

&lt;h3 id=&#34;portal-2&#34;&gt;Portal 2&lt;/h3&gt;

&lt;p&gt;With the Unigine Heaven benchmark working in my VM, I decided to attempt the
next test&amp;hellip; playing a video game. Now, I have &lt;em&gt;zero&lt;/em&gt; intentions of running games in
my VMs, but this is the most common use case for having a GPU-passthrough
setup, so I wanted to see how this system compared.&lt;/p&gt;

&lt;p&gt;I decided to try running a classic game: Portal 2. It&amp;rsquo;s not a very resource
intensive game, but one that certainly does &lt;em&gt;not&lt;/em&gt; normally run well in my VMs.
I installed the game, started a level&amp;hellip;  and was immediately forced to stare
at the ground.&lt;/p&gt;

&lt;p&gt;Staring at my character&amp;rsquo;s feet, I was reminded that I was playing in a VM, and
that the game didn&amp;rsquo;t actually have my proper mouse capture. It only had the
input clicks from my host to the VM spice window, which wasn&amp;rsquo;t enough to
actually play the game.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/portal2_window.png&#34;&gt;
&lt;img alt=&#34;Playing Portal 2 in a Fedora VM&#34; src=&#34;../../img/posts/virtio-3d-vms/portal2_window.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Playing Portal2 at 2560x1440 resolution, inside my Fedora
VM.(I had it full screen but windowed it to show it was indeed in the VM)&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Anyway, after one VM shutdown and usb mouse pasthrough later&amp;hellip; I was playing
Portal 2! It was a little glitchy for the first few seconds, but afterwards ran
well.  I think the initial lag was likely due to the system heavily hitting the
&lt;em&gt;virtualized&lt;/em&gt; disk while loading the level. Regardless, I was thrilled.&lt;/p&gt;

&lt;h2 id=&#34;drawbacks-limitations&#34;&gt;Drawbacks/Limitations&lt;/h2&gt;

&lt;p&gt;While I&amp;rsquo;m very happy with the performance of my virtio VM, there are a few
drawbacks or limitations to keep in mind:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Need to pass through hardware devices&lt;/strong&gt;: &amp;hellip; like a mouse when gaming XD. This
could also be a webcam, microphone, flash drive, or even a full ssd if you need
better IO in the VM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux Guests Only:&lt;/strong&gt; While researching, I saw &lt;a href=&#34;https://www.youtube.com/watch?v=aBgYNDLXuyg&#34;&gt;conference talks about getting
virgl working on Windows&lt;/a&gt; , but I
&lt;em&gt;think&lt;/em&gt; it currently only works with Linux guests.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/other_working_distros.png&#34;&gt;
&lt;img alt=&#34;Both Manjaro and Pop_OS! worked fine&#34; src=&#34;../../img/posts/virtio-3d-vms/other_working_distros.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Both my Manjaro and Pop_OS! VMs worked just fine with
virgl&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Even on Linux, some Distros might freak out a bit&lt;/strong&gt;: I had weird issues
when trying it on some of my RHEL 8 VMs. The mouse pointer wouldn&amp;rsquo;t show
and the screen would glitch and flicker when running high graphics tasks. I&amp;rsquo;m
Not sure why it&amp;rsquo;s happening, but I&amp;rsquo;m guessing it might be related to older
software packages/kernel. I have tried it with Pop_OS! and Manjaro VMs and they
seem to work just fine.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;img/posts/virtio-3d-vms/glitch_t470_fedora.png&#34;&gt;
&lt;img alt=&#34;My Fedora VMs didn&#39;t work on my T470 Thinkpad&#34; src=&#34;../../img/posts/virtio-3d-vms/glitchy_t470_fedora.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;My Fedora VMs on my T470 Thinkpad (intel graphics only)
didn&amp;rsquo;t seem to like virgl&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not entirely sure about hardware support&lt;/strong&gt;: So far my working VMs have all
been on my desktop, which has an AMD RX580 GPU. I tried using a Fedora guest
on my T470 Thinkpad which has integrated Intel graphics, but the screen was
all crazy at login. I don&amp;rsquo;t know what hardware is supported and
what isn&amp;rsquo;t. It is possible that different hardware might just need different
settings selected, but I have not played around enough yet to know for sure.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall, I love this setup. It allows me to utilie my desktop to it&amp;rsquo;s full
potential, by running VMs I can jump into and forget that I am in a
virtalized system. This works well when testing fedora packages, or maintaining
a &lt;a href=&#34;https://fedoraproject.org/wiki/Releases/Rawhide&#34;&gt;Rawhide&lt;/a&gt; machine. Virgl is
an awesome projects and I hope it continues to progress over time. If you
haven&amp;rsquo;t tried it yet, give it a shot!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setup a Runner VM for Gitlab</title>
      <link>http://ryan.himmelwright.net/post/create-gitlab-runner/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/create-gitlab-runner/</guid>
      <description>&lt;p&gt;I play around with CI/CD pipelines quite a bit, both at home and at work. I have
mostly used Jenkins, but I wanted to see how Gitlab&amp;rsquo;s CI/CD tooling has
progressed over the last year. So, I decided to try to use Gitlab to manage the
automated build and deployments of a personal project I&amp;rsquo;ve been working on.
The first step of the process was to setup a runner my Gitlab instance could
use for the builds.&lt;/p&gt;

&lt;h2 id=&#34;setup-a-machine-vm&#34;&gt;Setup a Machine/VM&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/create-gitlab-runner/fedora-vm-install.png&#34;&gt;
&lt;img alt=&#34;Installing a new Fedora30 VM in Virt-Manager&#34; src=&#34;../../img/posts/create-gitlab-runner/fedora-vm-install.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Installing a new Fedora 30 VM in Virt-Manager for my runner&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;This will be a BYOG post (bring your own Gitlab). I already
&amp;ldquo;&lt;em&gt;had one laying around&lt;/em&gt;&amp;rdquo;, so I won&amp;rsquo;t cover setting that up.&lt;/p&gt;

&lt;p&gt;Your runner needs may differ, but in this post I am installing runner on a
Fedora 30 VM. I will also be using both &lt;a href=&#34;https://buildah.io/&#34;&gt;buildah&lt;/a&gt; and
&lt;a href=&#34;https://podman.io/&#34;&gt;podman&lt;/a&gt; for this project.&lt;/p&gt;

&lt;h4 id=&#34;some-things-to-note-consider-during-vm-setup&#34;&gt;Some things to note/consider during VM setup:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Install packages required for pipeline tasks (ex: &lt;code&gt;podman&lt;/code&gt; and &lt;code&gt;buildah&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;sudo&lt;/code&gt; is required, manage the &lt;code&gt;gitlab-runner&lt;/code&gt; user/group using &lt;code&gt;visudo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If using docker runners, &lt;code&gt;docker-machine&lt;/code&gt; needs to be installed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-runner&#34;&gt;Install runner&lt;/h2&gt;

&lt;p&gt;First, install the &lt;code&gt;gitlab-runner&lt;/code&gt; package. This can be done using the
instructions found
&lt;a href=&#34;https://docs.gitlab.com/runner/install/linux-repository.html&#34;&gt;here&lt;/a&gt;.
&lt;em&gt;However&lt;/em&gt;, I encountered issues installing it on my Fedora VMs, as this install
method isn&amp;rsquo;t supported for 30 yet.  (Check out &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-runner/issues/4401&#34;&gt;this
issue&lt;/a&gt; for more info).&lt;/p&gt;

&lt;h4 id=&#34;add-gitlab-s-repo&#34;&gt;Add GitLab&amp;rsquo;s Repo&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;install-gitlab-runner&#34;&gt;Install gitlab runner&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install gitlab-runner&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;alternative-copr-install&#34;&gt;(Alternative) Copr install&lt;/h2&gt;

&lt;p&gt;For now, I have been using the copr install posted in the comments
of that issue (linked above). I recommend checking if the issue is resolved first, as it
might change from the time of writing this post. To install:&lt;/p&gt;

&lt;p&gt;First enable the copr repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf copr enable snecker/gitlab-runner -y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install gitlab-runner -y&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;register-the-runner&#34;&gt;Register the Runner&lt;/h4&gt;

&lt;p&gt;Once installed, register the runner. Instructions on how to register a runner
can be found &lt;a href=&#34;https://docs.gitlab.com/runner/register/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo gitlab-runner register&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enter the coordinator URL (ex: &lt;code&gt;https://gitlab.com&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Next, a &lt;em&gt;gitlab-ci&lt;/em&gt; token must be shared with the runner.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/create-gitlab-runner/gitlab-runner-settings.png&#34;&gt;
&lt;img alt=&#34;Gitlab Runner Settings&#34; src=&#34;../../img/posts/create-gitlab-runner/gitlab-runner-settings.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Gitlab Runner&lt;strong&gt;s&lt;/strong&gt; Settings Page&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;To obtain a gitlab-ci token, got to &lt;strong&gt;Admin Area&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Overview&lt;/strong&gt; -&amp;gt;
&lt;strong&gt;Runners&lt;/strong&gt;. On the right, there should be a token to use during setup.&lt;/p&gt;

&lt;p&gt;When the runner registrations asks for the token, use the &amp;ldquo;registration token&amp;rdquo;
listed in the &amp;ldquo;Set up a shared Runner manually&amp;rdquo; section.&lt;/p&gt;

&lt;p&gt;Next, provide a short description, and add a tag or two (when prompted).&lt;/p&gt;

&lt;p&gt;Lastly, enter the executor (the system on the runner that executes commands). For
now, I&amp;rsquo;ve been using &lt;code&gt;&amp;quot;shell&amp;quot;&lt;/code&gt; for my needs, as these VMs are fully
dedicated to be used as the runners for a single project.&lt;/p&gt;

&lt;p&gt;Congrats, the runner should be registered! Now to set it up&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;link-to-ci-cd-builds&#34;&gt;Link to CI/CD Builds&lt;/h2&gt;

&lt;p&gt;It is time to link up the runner to a CI/CD job. This can be done with
tagging, but I currently just have one pipeline using my runners, so haven&amp;rsquo;t
used the tags as much. Edit the runner by clicking its  &lt;code&gt;edit&lt;/code&gt; icon.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/create-gitlab-runner/runner-edit.png&#34;&gt;
&lt;img alt=&#34;Gitlab Runner Settings&#34; src=&#34;../../img/posts/create-gitlab-runner/runner-edit.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Gitlab Runner Edit Page&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;In the runner edit menu, ensure that the &amp;ldquo;&lt;code&gt;Active&lt;/code&gt;&amp;rdquo; checkbox is checked. I&amp;rsquo;ve
also checked the &amp;ldquo;&lt;code&gt;Run untagged jobs&lt;/code&gt;&amp;rdquo; box for this runner, which will allow it
to pick up any job that does &lt;em&gt;not&lt;/em&gt; have a tag. If the runner is to be assigned
to a &lt;em&gt;specific&lt;/em&gt; project, that can be enabled/assigned below in the &amp;ldquo;&lt;code&gt;Restrict
projects for this Runner&lt;/code&gt;&amp;rdquo; section.&lt;/p&gt;

&lt;h2 id=&#34;test-run&#34;&gt;Test Run&lt;/h2&gt;

&lt;p&gt;To test out the runner, start a new build in a project! (Note, if there are
several runners already setup, 1. why are you reading this, and 2. it might be a good idea
to pause the others to ensure the new one will run with the test).&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t detail how to write a &lt;code&gt;gitlab-ci.yml&lt;/code&gt; now, but for my test I made an empty
demo repo with the following pipeline:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;before_script:
  - whoami
  - pwd
  - sudo dnf update -y

build-base:
  stage: build
  script:
    - echo &amp;#34;Hello world!&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After committing it, a build kicked off with the new runner and finished
successfully!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Notice that the job indeed ran on &lt;code&gt;post-runner&lt;/code&gt;, the runner I setup
specifically for this post&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../img/posts/create-gitlab-runner/pipeline-run.png&#34;&gt;
&lt;img alt=&#34;Gitlab Runner Settings&#34; src=&#34;../../img/posts/create-gitlab-runner/pipeline-run.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Gitlab Demo Job Run Results&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If the job is more complicated, more runs might have to be manually started
after tweaking the runner settings again. Pipelines can be started by going to
the project&amp;rsquo;s &lt;code&gt;CI/CD-&amp;gt;Pipelines&lt;/code&gt; page via the side menu, and hitting the &lt;code&gt;Run
Pipeline&lt;/code&gt; button.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it. We should now have a connected runner! So far, the runners have been working
&lt;em&gt;(mostly)&lt;/em&gt; fine. When they &lt;em&gt;do&lt;/em&gt; break, it is usually because I&amp;rsquo;ve let the disk
fill up or allowed some other system-related negligence to build up
&lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;. I might add some &amp;lsquo;runner maintenance&amp;rsquo; steps to my pipeline&amp;hellip; but
some other time. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extending a VM Virtual Disk</title>
      <link>http://ryan.himmelwright.net/post/extending-vm-hd/</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/extending-vm-hd/</guid>
      <description>&lt;p&gt;Last week, I extended the virtual disk of the VM hosting my
&lt;a href=&#34;https://jenkins.io&#34;&gt;jenkins&lt;/a&gt; server. Shortly after, I increased the maximum
disk size of one of the job&amp;rsquo;s docker containers, maxing out the disk. This
meant that I needed to extend the drive&lt;em&gt;&amp;hellip; again&lt;/em&gt;. If you ever do something
twice, it is &lt;em&gt;best&lt;/em&gt; to have it documented for the potential third time. So,
here we are.&lt;/p&gt;

&lt;h4 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h4&gt;

&lt;p&gt;Before getting started, I want to point out that this method is specific to the
environment I currently have for &lt;em&gt;my VMs&lt;/em&gt;. Specifically, I am using kvm/qemu
and virt-manager, with qcow2 images for the virtual disks. Additionally, the
specific VM I was extending was installed with LVM and it&amp;rsquo;s main partition was
formatted with a xfs file system. Just note that some steps &lt;em&gt;may&lt;/em&gt; differ
elsewhere. This is what worked for &lt;em&gt;me&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;clone-vm&#34;&gt;Clone VM&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/extending-vm-hd/clone-vm.png&#34;&gt;&lt;img alt=&#34;Clone VM window in Virt Manager&#34; src= &#34;/img/posts/extending-vm-hd/clone-vm.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Cloning the VM in Virt Manager&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;While not &lt;em&gt;required&lt;/em&gt;, it isn&amp;rsquo;t a &lt;em&gt;bad&lt;/em&gt; idea to first clone the VM (just
in case anything becomes damaged). If using &lt;code&gt;virt-manager&lt;/code&gt;, cloning a
VM is as simple as right clicking a &lt;em&gt;powered down&lt;/em&gt; VM, and selecting
&amp;ldquo;&lt;em&gt;Clone&amp;hellip;&lt;/em&gt;&amp;rdquo;. A window will pop up with options for cloning the
VM. Make the desired name changes and hit &lt;em&gt;Clone&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;extend-qcow2-file&#34;&gt;Extend qcow2 file&lt;/h2&gt;

&lt;p&gt;The first step in resizing the virtual drive is to first expand
the &lt;code&gt;qcow2&lt;/code&gt; image. By default, the images tend to be stored at
&lt;code&gt;/var/lib/libvirt/images/&lt;/code&gt; and will require &lt;code&gt;root&lt;/code&gt; privileges to
access. Virt-Manager can be used to double check which image the VM is
using for its disk. To resize the qcow2 image, use the &lt;code&gt;qemu-img
resize&lt;/code&gt; command, providing it the image file path/name and then the size
to expand it. For example, I used &lt;code&gt;+40G&lt;/code&gt; in my command (&lt;code&gt;qemu-img
resize Jenkins.qcow2 +40G&lt;/code&gt;) to extend the image by 40GB.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@ninetales:/var/lib/libvirt/images# qemu-img info Jenkins.qcow2
image: Jenkins.qcow2
file format: qcow2
virtual size: 20G &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21474836480&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
disk size: 20G
cluster_size: &lt;span style=&#34;color:#ae81ff&#34;&gt;65536&lt;/span&gt;
Format specific information:
    compat: 1.1
    lazy refcounts: true
    refcount bits: &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
    corrupt: false

root@ninetales:/var/lib/libvirt/images# qemu-img resize Jenkins.qcow2 +40G
Image resized.

root@ninetales:/var/lib/libvirt/images# qemu-img info Jenkins.qcow2
image: Jenkins.qcow2
file format: qcow2
virtual size: 60G &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64424509440&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
disk size: 20G
cluster_size: &lt;span style=&#34;color:#ae81ff&#34;&gt;65536&lt;/span&gt;
Format specific information:
    compat: 1.1
    lazy refcounts: true
    refcount bits: &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
    corrupt: false

root@ninetales:/var/lib/libvirt/images#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command &lt;code&gt;qemu-image info&lt;/code&gt; can be helpful in verifying that the resize
worked, by checking the size of the image.&lt;/p&gt;

&lt;h2 id=&#34;gparted-live-iso&#34;&gt;Gparted Live ISO&lt;/h2&gt;

&lt;p&gt;For the next few steps, it is a good idea to boot the system from a live CD.
This will run the OS in RAM, allowing the disk to be fully unmounted.  With
access to the VM&amp;rsquo;s display, an ISO such as the &lt;a href=&#34;https://gparted.org/livecd.php&#34;&gt;gparted live
CD&lt;/a&gt; can be used to resize the partitions,
as it contains the amazing graphical tool, &lt;code&gt;gparted&lt;/code&gt; (duh).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you boot up the VM and don&amp;rsquo;t see the new unallocated space available in the
volume&amp;hellip; make sure you didn&amp;rsquo;t accidentally boot the &lt;em&gt;backup VM&lt;/em&gt;&amp;hellip; Not that
&lt;strong&gt;I made such a mistake&amp;hellip;&lt;/strong&gt; :P&lt;/p&gt;

&lt;h4 id=&#34;lvm-resize&#34;&gt;LVM Resize&lt;/h4&gt;

&lt;p&gt;My VM is installed using LVM volumes, so I had to resize them
before I could resize the file system. Gparted will do this
automatically when resizing a partition.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/extending-vm-hd/gparted-live-iso.png&#34;&gt;&lt;img alt=&#34;Booting into the Gparted live ISO&#34; src= &#34;/img/posts/extending-vm-hd/gparted-live-iso.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Booting into the Gparted live ISO&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;To resize the partition, first verify that the correct virtual disk
is selected in the top right drop-down the window. Next, select the
partition to expand, and click the &amp;ldquo;&lt;em&gt;Resize/Move&lt;/em&gt;&amp;rdquo; icon at the top.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;../../img/posts/extending-vm-hd/gparted-resize.png&#34;&gt;&lt;img alt=&#34;Resizing the partition in Gparted&#34; src= &#34;/img/posts/extending-vm-hd/gparted-resize.png&#34; style=&#34;max-width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;div class=&#34;caption&#34;&gt;Resizing the partition in Gparted&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;In the resize window, I changed the &lt;code&gt;Free space following (MiB)&lt;/code&gt;
value to &lt;code&gt;0&lt;/code&gt;, to expand the partition to use &lt;em&gt;all&lt;/em&gt; of the unallocated space.
Lastly, I hit the &lt;em&gt;Resize&lt;/em&gt; button and let Gparted do it&amp;rsquo;s magic.&lt;/p&gt;

&lt;h4 id=&#34;grow-xfs&#34;&gt;Grow XFS&lt;/h4&gt;

&lt;p&gt;Finally, with the lvm volume expanded, I just had to grow my file system to use
the new space. I booted up the VM and logged in. This VM uses an xfs file
system, so I was able to use the &lt;code&gt;xfs_growfs&lt;/code&gt; command to expand the partition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ryan@mr-mime ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo xfs_growfs /dev/centos/root
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;... Ryan removed output &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the post...&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
data blocks changed from &lt;span style=&#34;color:#ae81ff&#34;&gt;4851712&lt;/span&gt; to &lt;span style=&#34;color:#ae81ff&#34;&gt;15322112&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ryan@mr-mime ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ df -h
Filesystem               Size  Used Avail Use% Mounted on
/dev/mapper/centos-root   59G   19G   40G  32% /
devtmpfs                 1.9G     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  1.9G   0% /dev
tmpfs                    1.9G  8.0K  1.9G   1% /dev/shm
tmpfs                    1.9G  8.7M  1.9G   1% /run
tmpfs                    1.9G     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  1.9G   0% /sys/fs/cgroup
/dev/vda1                497M  231M  267M  47% /boot
tmpfs                    379M     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  379M   0% /run/user/1000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note: My VM&amp;rsquo;s disk space was COMPLETELY full. This meant that I couldn&amp;rsquo;t use auto
tab complete in my shell because it spit out there&amp;rsquo;s no disk space. Typing the
command out fully by hand, still worked.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With the xfs partition resized, I rebooted the VM for good measure, and
everything was up and running again.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s about it. Remember, the steps I took might need to be altered for other
environments, but this post should still be a good &lt;em&gt;starting&lt;/em&gt; point. I know it
will help me when I acidently overfill this VM &lt;em&gt;again&lt;/em&gt;&amp;hellip; Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exporting Proxmox VMs</title>
      <link>http://ryan.himmelwright.net/post/exporting-proxmox-vms/</link>
      <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ryan.himmelwright.net/post/exporting-proxmox-vms/</guid>
      <description>&lt;p&gt;For a long time I have been thinking about replacing my server&amp;rsquo;s proxmox install with vanilla Debian or CentOS, mostly for learning purposes. I would first setup zfs on the new system and import my existing data pools. Then, I would use either a system like ovrit or just plain kvm/lxc to run my VMs and containers. In order to do this though&amp;hellip; I have to first figure out how export my containers and VMs running in Proxmox. As it turns out&amp;hellip; exporting the VMs wasn&amp;rsquo;t very hard&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;exporting-proxmox-vm-disk&#34;&gt;Exporting Proxmox VM Disk&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;img alt=&#34;Proxmox logo&#34; src=&#34;../../img/posts/exporting-proxmox-vms/proxmox-logo.png&#34; style=&#34;max-width: 100%;&#34;/&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;My Proxmox VMs are setup on an LVM virtual group, with each virtual drive being a lvm volume passed to the VM. So, I wanted to be able to extract these disks to something I could more easily transfer. I ended up converting the lvm volumes to qcow2 images because it was easy and I&amp;rsquo;ve actually experienced okay performance with qcow2 on my workstations. Additionally, qcow2 being a single file, is easy to move around and I can always convert them to something else on the final system. To export one of the VMs, I ran the command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qemu-img convert -O qcow2 /dev/pve/vm-108-disk-1 /Data/freebsd-vm.qcow2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That was it. It took a few minutes to finish, but honestly that is all I had to do (I&amp;rsquo;m sure I should of taken a snapshot or something then copy that, but this seemed to work fine). When it completed, I copied the image down to my desktop and decided to test it out with virt-manager.&lt;/p&gt;

&lt;h2 id=&#34;importing-the-image-to-virt-manager&#34;&gt;Importing the image to Virt-Manager&lt;/h2&gt;

&lt;p&gt;I opened up virt-manager and selected the button to create a new VM. At the first prompt, instead of selecting my usual &amp;ldquo;Local install media (ISO image or CDROM)&amp;rdquo; option, I choose to &amp;ldquo;Import an existing disk image&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img alt=&#34;import image&#34; src=&#34;../../img/posts/exporting-proxmox-vms/import-image.png&#34; style=&#34;max-width: 100%;&#34;/&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;At the second menu, I opened up the browse menu to see my already configured locations. From there, I found where I had saved the converted qcow2 image, and selected it.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img alt=&#34;select qcow2 image&#34; src=&#34;../../img/posts/exporting-proxmox-vms/select-qcow2-image.png&#34; style=&#34;max-width: 100%;&#34;/&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Next, I continued setting up the virtual specs (CPU, RAM, etc.) for the machine just as I would with any other VM setup. When I was done, I started the VM and FreeBSD booted right up. I logged in and compared the installed applications and files with the still running proxmox VM. They were identical.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all I really have for this post. It was extremely simple to export the VMs. I know I&amp;rsquo;m not fully done yet and still have to import the VMs to the final system, but I&amp;rsquo;ll save that for a later post. Right now&amp;hellip; I have quite a few VM images to convert, so I might as well get started.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
